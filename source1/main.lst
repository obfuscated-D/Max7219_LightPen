
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003c4  00800100  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  008004c4  008004c4  00000aa8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001309  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a09  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000602  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000743  00000000  00000000  00003567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003caa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_3>
  10:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3c       	cpi	r26, 0xC4	; 196
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a4 ec       	ldi	r26, 0xC4	; 196
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3e       	cpi	r26, 0xE2	; 226
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  9e:	0c 94 26 03 	jmp	0x64c	; 0x64c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <scroll>:
  
    Delay(MAIN_DELAY); //<--- this is the amount of time to show the detected location before searching again.
    
  }
}
void scroll(){
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
   send16(max7219MakePacket(cmdINT, 0x07));
  ae:	67 e0       	ldi	r22, 0x07	; 7
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <max7219MakePacket>
  b6:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  ba:	c6 ec       	ldi	r28, 0xC6	; 198
  bc:	d4 e0       	ldi	r29, 0x04	; 4
  be:	0e ec       	ldi	r16, 0xCE	; 206
  c0:	14 e0       	ldi	r17, 0x04	; 4
  for (int i = 0; i < 8; i++)
  {
    image2[i] = image2[i] << 1 | image2[i] >> 7;
  c2:	89 91       	ld	r24, Y+
  c4:	fe 01       	movw	r30, r28
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	88 0f       	add	r24, r24
  ca:	81 1d       	adc	r24, r1
  cc:	80 83       	st	Z, r24
    max7219Blit(image2);
  ce:	86 ec       	ldi	r24, 0xC6	; 198
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	0e 94 b0 01 	call	0x360	; 0x360 <max7219Blit>
    Delay(10000);
  d6:	60 e1       	ldi	r22, 0x10	; 16
  d8:	77 e2       	ldi	r23, 0x27	; 39
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
    
  }
}
void scroll(){
   send16(max7219MakePacket(cmdINT, 0x07));
  for (int i = 0; i < 8; i++)
  e2:	0c 17       	cp	r16, r28
  e4:	1d 07       	cpc	r17, r29
  e6:	69 f7       	brne	.-38     	; 0xc2 <scroll+0x1c>
    image2[i] = image2[i] << 1 | image2[i] >> 7;
    max7219Blit(image2);
    Delay(10000);
  }

}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	08 95       	ret

000000f2 <diagonal_scroll>:

void diagonal_scroll(){
    uint8_t temp = image2[0]; // Temporary storage for the first row to handle vertical wrapping.
  f2:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <image2>
  f6:	e6 ec       	ldi	r30, 0xC6	; 198
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	df 01       	movw	r26, r30
    
    // Vertical rotation of the rows
    for (int j = 0; j < 7; j++) { // Move each row down
        image2[j] = image2[j + 1];
  fc:	11 96       	adiw	r26, 0x01	; 1
  fe:	8c 91       	ld	r24, X
 100:	11 97       	sbiw	r26, 0x01	; 1
 102:	8d 93       	st	X+, r24

void diagonal_scroll(){
    uint8_t temp = image2[0]; // Temporary storage for the first row to handle vertical wrapping.
    
    // Vertical rotation of the rows
    for (int j = 0; j < 7; j++) { // Move each row down
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	ad 3c       	cpi	r26, 0xCD	; 205
 108:	b8 07       	cpc	r27, r24
 10a:	c1 f7       	brne	.-16     	; 0xfc <diagonal_scroll+0xa>
        image2[j] = image2[j + 1];
    }
    image2[7] = temp; // Wrap around the first row to the last position
 10c:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <image2+0x7>
 110:	2e ec       	ldi	r18, 0xCE	; 206
 112:	34 e0       	ldi	r19, 0x04	; 4

    // Horizontal wrapping within each row
    for (int j = 0; j < 8; j++) {
        image2[j] = (image2[j] << 1) | (image2[j] >> 7);
 114:	81 91       	ld	r24, Z+
 116:	df 01       	movw	r26, r30
 118:	11 97       	sbiw	r26, 0x01	; 1
 11a:	88 0f       	add	r24, r24
 11c:	81 1d       	adc	r24, r1
 11e:	8c 93       	st	X, r24
        image2[j] = image2[j + 1];
    }
    image2[7] = temp; // Wrap around the first row to the last position

    // Horizontal wrapping within each row
    for (int j = 0; j < 8; j++) {
 120:	2e 17       	cp	r18, r30
 122:	3f 07       	cpc	r19, r31
 124:	b9 f7       	brne	.-18     	; 0x114 <diagonal_scroll+0x22>
        image2[j] = (image2[j] << 1) | (image2[j] >> 7);
    }

    // Update the display and delay
    max7219Blit(image2);
 126:	86 ec       	ldi	r24, 0xC6	; 198
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	0e 94 b0 01 	call	0x360	; 0x360 <max7219Blit>
    Delay(20000);
 12e:	60 e2       	ldi	r22, 0x20	; 32
 130:	7e e4       	ldi	r23, 0x4E	; 78
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <Delay>

0000013a <setupInt>:
}
void setupInt()
{
  EICRA = (1 << ISC10) | (1 << ISC00); // we need to set up int0 and int1 to trigger interrupts on both edges
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK = (1 << INT0) | (0 << INT1);   // then enable them.
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8d bb       	out	0x1d, r24	; 29

  PCICR = (1 << PCIE0);
 144:	e8 e6       	ldi	r30, 0x68	; 104
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 83       	st	Z, r24

  // Enable pin change interrupt on pin PB2 (which is PCINT2) and PB4 (which is PCINT4)
  PCMSK0 = (1 << PCINT2) | (1 << PCINT4);
 14a:	84 e1       	ldi	r24, 0x14	; 20
 14c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>

  // Enable pin change interrupt on port C (PCIE1 for PCINT8 to PCINT15)
  PCICR |= (1 << PCIE1);
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24

  // Enable pin change interrupt on pin PC3 (which is PCINT11)
  PCMSK1 |= (1 << PCINT11);
 156:	ec e6       	ldi	r30, 0x6C	; 108
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	80 83       	st	Z, r24
}
 160:	08 95       	ret

00000162 <clearImage>:

void clearImage()
{
 162:	e6 ec       	ldi	r30, 0xC6	; 198
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	a8 ed       	ldi	r26, 0xD8	; 216
 168:	b4 e0       	ldi	r27, 0x04	; 4
  for (int i = 0; i < 8; i++)
  {
    image2[i] = 0x00;
 16a:	11 92       	st	Z+, r1
    image2_buff[i] = 0x00;
 16c:	1d 92       	st	X+, r1
  PCMSK1 |= (1 << PCINT11);
}

void clearImage()
{
  for (int i = 0; i < 8; i++)
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	ee 3c       	cpi	r30, 0xCE	; 206
 172:	f8 07       	cpc	r31, r24
 174:	d1 f7       	brne	.-12     	; 0x16a <clearImage+0x8>
  {
    image2[i] = 0x00;
    image2_buff[i] = 0x00;
  }
  penX = penY = 0;
 176:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <penY>
 17a:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <penX>
}
 17e:	08 95       	ret

00000180 <__vector_3>:
ISR(PCINT0_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
  Delay(1000); // debounce delay
 1a2:	68 ee       	ldi	r22, 0xE8	; 232
 1a4:	73 e0       	ldi	r23, 0x03	; 3
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
  bounce_count++;
 1ae:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <__data_end>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <__data_end>
  delete = 0;
 1b8:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <delete>
  if (bounce_count % 2 == 0)
 1bc:	80 ff       	sbrs	r24, 0
 1be:	1b c0       	rjmp	.+54     	; 0x1f6 <__vector_3+0x76>
 1c0:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <record>
  {
    record = !record;
    bounce_count = 0;
  }
  record = !record;
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	81 11       	cpse	r24, r1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <record>
  if (record == 1)
 1ce:	88 23       	and	r24, r24
 1d0:	f1 f0       	breq	.+60     	; 0x20e <__vector_3+0x8e>
  {
    SetBit(3, PORTB);
  }
  else
  {
    ClearBit(3, PORTB);
 1d2:	2b 98       	cbi	0x05, 3	; 5
  }
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti
  Delay(1000); // debounce delay
  bounce_count++;
  delete = 0;
  if (bounce_count % 2 == 0)
  {
    record = !record;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <record>
 1fc:	91 11       	cpse	r25, r1
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <__vector_3+0x86>
    bounce_count = 0;
 200:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <__data_end>
 204:	df cf       	rjmp	.-66     	; 0x1c4 <__vector_3+0x44>
  Delay(1000); // debounce delay
  bounce_count++;
  delete = 0;
  if (bounce_count % 2 == 0)
  {
    record = !record;
 206:	80 e0       	ldi	r24, 0x00	; 0
    bounce_count = 0;
 208:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <__data_end>
 20c:	db cf       	rjmp	.-74     	; 0x1c4 <__vector_3+0x44>
  }
  record = !record;
  if (record == 1)
  {
    SetBit(3, PORTB);
 20e:	2b 9a       	sbi	0x05, 3	; 5
 210:	e1 cf       	rjmp	.-62     	; 0x1d4 <__vector_3+0x54>

00000212 <__vector_4>:
  {
    ClearBit(3, PORTB);
  }
}
ISR(PCINT1_vect)
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
  Delay(100000);
 234:	60 ea       	ldi	r22, 0xA0	; 160
 236:	76 e8       	ldi	r23, 0x86	; 134
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
  if (record == 1)
 240:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <record>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	09 f1       	breq	.+66     	; 0x28a <__vector_4+0x78>
  {
    delete = 1;
  }
  else
  {
    delete = 0;
 248:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <delete>
 24c:	e6 ec       	ldi	r30, 0xC6	; 198
 24e:	f4 e0       	ldi	r31, 0x04	; 4
 250:	a8 ed       	ldi	r26, 0xD8	; 216
 252:	b4 e0       	ldi	r27, 0x04	; 4

void clearImage()
{
  for (int i = 0; i < 8; i++)
  {
    image2[i] = 0x00;
 254:	11 92       	st	Z+, r1
    image2_buff[i] = 0x00;
 256:	1d 92       	st	X+, r1
  PCMSK1 |= (1 << PCINT11);
}

void clearImage()
{
  for (int i = 0; i < 8; i++)
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	ee 3c       	cpi	r30, 0xCE	; 206
 25c:	f8 07       	cpc	r31, r24
 25e:	d1 f7       	brne	.-12     	; 0x254 <__vector_4+0x42>
  {
    image2[i] = 0x00;
    image2_buff[i] = 0x00;
  }
  penX = penY = 0;
 260:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <penY>
 264:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <penX>
  else
  {
    delete = 0;
    clearImage();
  }
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti
ISR(PCINT1_vect)
{
  Delay(100000);
  if (record == 1)
  {
    delete = 1;
 28a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <delete>
 28e:	ec cf       	rjmp	.-40     	; 0x268 <__vector_4+0x56>

00000290 <__vector_1>:
    clearImage();
  }
}

ISR(INT0_vect)
{ // the scanning produces brief pulses, we just need to know if it saw one since we last cleared the flag.
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	8f 93       	push	r24
  Flag = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <Flag>
}
 2a2:	8f 91       	pop	r24
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <send16>:


// send a 16bit word, msb first
void send16 (unsigned int bits) {
  unsigned int temp;  
  CSlow();
 2ae:	5d 98       	cbi	0x0b, 5	; 11
 2b0:	40 e1       	ldi	r20, 0x10	; 16
 2b2:	50 e0       	ldi	r21, 0x00	; 0
  for( temp = (0x0001<<15); temp != 0; temp >>= 1) {    
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e8       	ldi	r19, 0x80	; 128
 2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <send16+0x26>
    if ( (bits & temp) != 0 ) {    SendOne();
 2ba:	5b 9a       	sbi	0x0b, 3	; 11
    } else {                       SendZero();
 2bc:	5c 98       	cbi	0x0b, 4	; 11
 2be:	00 00       	nop
 2c0:	00 00       	nop
 2c2:	5c 9a       	sbi	0x0b, 4	; 11
 2c4:	00 00       	nop
    }    
   NOP();
 2c6:	00 00       	nop
   NOP();
 2c8:	00 00       	nop

// send a 16bit word, msb first
void send16 (unsigned int bits) {
  unsigned int temp;  
  CSlow();
  for( temp = (0x0001<<15); temp != 0; temp >>= 1) {    
 2ca:	36 95       	lsr	r19
 2cc:	27 95       	ror	r18
 2ce:	41 50       	subi	r20, 0x01	; 1
 2d0:	51 09       	sbc	r21, r1
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <send16+0x34>
    if ( (bits & temp) != 0 ) {    SendOne();
 2d4:	bc 01       	movw	r22, r24
 2d6:	62 23       	and	r22, r18
 2d8:	73 23       	and	r23, r19
 2da:	67 2b       	or	r22, r23
 2dc:	71 f7       	brne	.-36     	; 0x2ba <send16+0xc>
    } else {                       SendZero();
 2de:	5b 98       	cbi	0x0b, 3	; 11
 2e0:	ed cf       	rjmp	.-38     	; 0x2bc <send16+0xe>
    }    
   NOP();
   NOP();
  } 
  CShigh();
 2e2:	5d 9a       	sbi	0x0b, 5	; 11
}
 2e4:	08 95       	ret

000002e6 <max7219MakePacket>:

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
}
 2e6:	98 2f       	mov	r25, r24
 2e8:	86 2f       	mov	r24, r22
 2ea:	08 95       	ret

000002ec <max7219Init>:


void max7219Init( ) { 
   send16(max7219MakePacket(cmdPOWER,  0x01));   // wakeup
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	9c e0       	ldi	r25, 0x0C	; 12
 2f0:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdTEST,   0x00));   // no test mode   
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	9d e0       	ldi	r25, 0x0D	; 13
 2f8:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdINT,    0x07)); // 1/2 brightness (8/15)     
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	9a e0       	ldi	r25, 0x0A	; 10
 300:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdSCAN,   0xFF)); // all digits
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	9b e0       	ldi	r25, 0x0B	; 11
 308:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdMODE,   0x00)); // no decode
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	99 e0       	ldi	r25, 0x09	; 9
 310:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  // send16(max7219MakePacket(cmdMODE,   0xFF));  // all decode
  
   send16(max7219MakePacket(cmdDIG0+0, 0x00)); // dots!
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdDIG0+1, 0x00)); // dots!
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdDIG0+2, 0x00)); // dots!
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	93 e0       	ldi	r25, 0x03	; 3
 328:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdDIG0+3, 0x00)); // dots!
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	94 e0       	ldi	r25, 0x04	; 4
 330:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdDIG0+4, 0xFF)); // dots!
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	95 e0       	ldi	r25, 0x05	; 5
 338:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdDIG0+5, 0xFF)); // dots!
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	96 e0       	ldi	r25, 0x06	; 6
 340:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdDIG0+6, 0xFF)); // dots!
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	97 e0       	ldi	r25, 0x07	; 7
 348:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
   send16(max7219MakePacket(cmdDIG0+7, 0xFF)); // dots! 
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	98 e0       	ldi	r25, 0x08	; 8
 350:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <send16>

00000354 <max7219SetDisplay>:
    
}

void max7219SetDisplay( unsigned char digit, unsigned char v)   { 
   digit &= 0x07;
 354:	87 70       	andi	r24, 0x07	; 7
   send16(max7219MakePacket(cmdDIG0+digit, v));       
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	98 2f       	mov	r25, r24
 35a:	86 2f       	mov	r24, r22
 35c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <send16>

00000360 <max7219Blit>:
}

void max7219Blit( uint8_t *i) {
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 366:	88 81       	ld	r24, Y
 368:	90 e0       	ldi	r25, 0x00	; 0
   digit &= 0x07;
   send16(max7219MakePacket(cmdDIG0+digit, v));       
}

void max7219Blit( uint8_t *i) {
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
 36a:	91 60       	ori	r25, 0x01	; 1
 36c:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	90 e0       	ldi	r25, 0x00	; 0
   send16(max7219MakePacket(cmdDIG0+digit, v));       
}

void max7219Blit( uint8_t *i) {
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
 374:	92 60       	ori	r25, 0x02	; 2
 376:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	90 e0       	ldi	r25, 0x00	; 0
}

void max7219Blit( uint8_t *i) {
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
 37e:	93 60       	ori	r25, 0x03	; 3
 380:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	90 e0       	ldi	r25, 0x00	; 0

void max7219Blit( uint8_t *i) {
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
 388:	94 60       	ori	r25, 0x04	; 4
 38a:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	90 e0       	ldi	r25, 0x00	; 0
void max7219Blit( uint8_t *i) {
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
 392:	95 60       	ori	r25, 0x05	; 5
 394:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 398:	8d 81       	ldd	r24, Y+5	; 0x05
 39a:	90 e0       	ldi	r25, 0x00	; 0
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
 39c:	96 60       	ori	r25, 0x06	; 6
 39e:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 3a2:	8e 81       	ldd	r24, Y+6	; 0x06
 3a4:	90 e0       	ldi	r25, 0x00	; 0
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
 3a6:	97 60       	ori	r25, 0x07	; 7
 3a8:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 3ac:	8f 81       	ldd	r24, Y+7	; 0x07
 3ae:	90 e0       	ldi	r25, 0x00	; 0
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
 3b0:	98 60       	ori	r25, 0x08	; 8
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
 3b6:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <send16>

000003ba <max7219SetIntensity>:
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 3ba:	90 e0       	ldi	r25, 0x00	; 0
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
}

void max7219SetIntensity( unsigned char v)   { send16(max7219MakePacket(cmdINT, v)); }
 3bc:	9a 60       	ori	r25, 0x0A	; 10
 3be:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <send16>

000003c2 <max7219SetScanLimit>:
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 3c2:	90 e0       	ldi	r25, 0x00	; 0
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
}

void max7219SetIntensity( unsigned char v)   { send16(max7219MakePacket(cmdINT, v)); }
void max7219SetScanLimit( unsigned char v)   { send16(max7219MakePacket(cmdSCAN, v)); }
 3c4:	9b 60       	ori	r25, 0x0B	; 11
 3c6:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <send16>

000003ca <max7219SetDecodeFlags>:
  } 
  CShigh();
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 3ca:	90 e0       	ldi	r25, 0x00	; 0
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
}

void max7219SetIntensity( unsigned char v)   { send16(max7219MakePacket(cmdINT, v)); }
void max7219SetScanLimit( unsigned char v)   { send16(max7219MakePacket(cmdSCAN, v)); }
void max7219SetDecodeFlags( unsigned char v) { send16(max7219MakePacket(cmdMODE, v)); }
 3cc:	99 60       	ori	r25, 0x09	; 9
 3ce:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <send16>

000003d2 <Delay>:
#include "nopDelay.h"

void Delay(uint32_t d) {
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <Delay+0xc>
  for (; d; d--)  asm volatile ("nop"::); 
 3d4:	00 00       	nop
 3d6:	61 50       	subi	r22, 0x01	; 1
 3d8:	71 09       	sbc	r23, r1
 3da:	81 09       	sbc	r24, r1
 3dc:	91 09       	sbc	r25, r1
 3de:	61 15       	cp	r22, r1
 3e0:	71 05       	cpc	r23, r1
 3e2:	81 05       	cpc	r24, r1
 3e4:	91 05       	cpc	r25, r1
 3e6:	b1 f7       	brne	.-20     	; 0x3d4 <Delay+0x2>
}
 3e8:	08 95       	ret

000003ea <main>:
    [0x40] = {{0x80, 0xFE}, {0xFF, 0x06}},
    [0x80] = {{0xFF, 0xFE}, {0xFF, 0x07}},
    [0x00] = {{0x0F, 0x0F}, {0xFF, 0xFF}}};

int main(void)
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <main+0x6>
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <main+0x8>
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62

  int8_t detX, detY;
  uint8_t step;

  // set up directions
  DDRB = (OUTPUT << PB0 | OUTPUT << PB1 | INPUT << PB2 | INPUT << PB3 | INPUT << PB4 | OUTPUT << PB5 | INPUT << PB6 | INPUT << PB7);
 3f6:	83 e2       	ldi	r24, 0x23	; 35
 3f8:	84 b9       	out	0x04, r24	; 4
  DDRD = (INPUT << PD0 | INPUT << PD1 | INPUT << PD2 | OUTPUT << PD3 | OUTPUT << PD4 | OUTPUT << PD5 | OUTPUT << PD6 | INPUT << PD7);
 3fa:	88 e7       	ldi	r24, 0x78	; 120
 3fc:	8a b9       	out	0x0a, r24	; 10
  DDRC = (INPUT << PC0 | INPUT << PC1 | INPUT << PC2 | INPUT << PC3 | INPUT << PC4 | INPUT << PC5 | INPUT << PC6);
 3fe:	17 b8       	out	0x07, r1	; 7

  max7219Init(numDevices);
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 76 01 	call	0x2ec	; 0x2ec <max7219Init>
    max7219Blit(image2);
    Delay(20000);
}
void setupInt()
{
  EICRA = (1 << ISC10) | (1 << ISC00); // we need to set up int0 and int1 to trigger interrupts on both edges
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK = (1 << INT0) | (0 << INT1);   // then enable them.
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	8d bb       	out	0x1d, r24	; 29

  PCICR = (1 << PCIE0);
 412:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>

  // Enable pin change interrupt on pin PB2 (which is PCINT2) and PB4 (which is PCINT4)
  PCMSK0 = (1 << PCINT2) | (1 << PCINT4);
 416:	84 e1       	ldi	r24, 0x14	; 20
 418:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>

  // Enable pin change interrupt on port C (PCIE1 for PCINT8 to PCINT15)
  PCICR |= (1 << PCIE1);
 41c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 420:	82 60       	ori	r24, 0x02	; 2
 422:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>

  // Enable pin change interrupt on pin PC3 (which is PCINT11)
  PCMSK1 |= (1 << PCINT11);
 426:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
 42a:	88 60       	ori	r24, 0x08	; 8
 42c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
  DDRD = (INPUT << PD0 | INPUT << PD1 | INPUT << PD2 | OUTPUT << PD3 | OUTPUT << PD4 | OUTPUT << PD5 | OUTPUT << PD6 | INPUT << PD7);
  DDRC = (INPUT << PC0 | INPUT << PC1 | INPUT << PC2 | INPUT << PC3 | INPUT << PC4 | INPUT << PC5 | INPUT << PC6);

  max7219Init(numDevices);
  setupInt();
  sei();
 430:	78 94       	sei

  penX = penY = 0;
 432:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <penY>
 436:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <penX>

    uint8_t step = 0x00;
    if(record == 1){
    while (step < 0xFE)
    {
      uint8_t flagIndex = Flag ? 1 : 0;
 43a:	ee 24       	eor	r14, r14
 43c:	e3 94       	inc	r14
 43e:	f1 2c       	mov	r15, r1
 440:	08 c0       	rjmp	.+16     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
    image2[penY] |= (1<<penX);  ;
    send16(max7219MakePacket(cmdINT, 0x0C)); // 1/2 brightness (C/15)
    max7219Blit(image2);
    }
    else{
      diagonal_scroll();
 442:	0e 94 79 00 	call	0xf2	; 0xf2 <diagonal_scroll>
    //scroll();
    }
   
  
    Delay(MAIN_DELAY); //<--- this is the amount of time to show the detected location before searching again.
 446:	60 e8       	ldi	r22, 0x80	; 128
 448:	78 e3       	ldi	r23, 0x38	; 56
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
  penX = penY = 0;

  while (1)
  {

    send16(max7219MakePacket(cmdINT, 0x06)); // 1/2 brightness (7/15)
 452:	66 e0       	ldi	r22, 0x06	; 6
 454:	8a e0       	ldi	r24, 0x0A	; 10
 456:	0e 94 73 01 	call	0x2e6	; 0x2e6 <max7219MakePacket>
 45a:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
    detX = detY = -1;

    SetBit(6, PORTD);
 45e:	5e 9a       	sbi	0x0b, 6	; 11

    uint8_t step = 0x00;
    if(record == 1){
 460:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <record>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	69 f7       	brne	.-38     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
    send16(max7219MakePacket(cmdINT, 0x06)); // 1/2 brightness (7/15)
    detX = detY = -1;

    SetBit(6, PORTD);

    uint8_t step = 0x00;
 468:	10 e0       	ldi	r17, 0x00	; 0

  while (1)
  {

    send16(max7219MakePacket(cmdINT, 0x06)); // 1/2 brightness (7/15)
    detX = detY = -1;
 46a:	dd 24       	eor	r13, r13
 46c:	da 94       	dec	r13

    uint8_t step = 0x00;
    if(record == 1){
    while (step < 0xFE)
    {
      uint8_t flagIndex = Flag ? 1 : 0;
 46e:	20 91 e1 04 	lds	r18, 0x04E1	; 0x8004e1 <Flag>
      State currentState = stateTable[step];
 472:	e1 2f       	mov	r30, r17
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	e0 50       	subi	r30, 0x00	; 0
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	80 81       	ld	r24, Z
 484:	91 81       	ldd	r25, Z+1	; 0x01
 486:	a2 81       	ldd	r26, Z+2	; 0x02
 488:	b3 81       	ldd	r27, Z+3	; 0x03
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	9a 83       	std	Y+2, r25	; 0x02
 48e:	ab 83       	std	Y+3, r26	; 0x03
 490:	bc 83       	std	Y+4, r27	; 0x04

    uint8_t step = 0x00;
    if(record == 1){
    while (step < 0xFE)
    {
      uint8_t flagIndex = Flag ? 1 : 0;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	21 11       	cpse	r18, r1
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
      State currentState = stateTable[step];

      // step step step
      step = currentState.nextState[flagIndex];
 49e:	e1 e0       	ldi	r30, 0x01	; 1
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	ec 0f       	add	r30, r28
 4a4:	fd 1f       	adc	r31, r29
 4a6:	e8 0f       	add	r30, r24
 4a8:	f9 1f       	adc	r31, r25
 4aa:	10 81       	ld	r17, Z

      // update x detection if needed
      if (currentState.detValue[flagIndex] != 0xFF)
 4ac:	23 e0       	ldi	r18, 0x03	; 3
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	2c 0f       	add	r18, r28
 4b2:	3d 1f       	adc	r19, r29
 4b4:	82 0f       	add	r24, r18
 4b6:	93 1f       	adc	r25, r19
 4b8:	dc 01       	movw	r26, r24
 4ba:	8c 91       	ld	r24, X
 4bc:	8f 3f       	cpi	r24, 0xFF	; 255
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
      {
        detX = currentState.detValue[flagIndex];
 4c0:	d8 2e       	mov	r13, r24
      }

      if (step < 0xFE)
 4c2:	1e 3f       	cpi	r17, 0xFE	; 254
 4c4:	80 f1       	brcs	.+96     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
        Flag = 0;
        Delay(DET_DELAY); // Change this delay down to about 3000 min. for high-speed scanning.
      }
    }

    if (detX != -1)
 4c6:	bf ef       	ldi	r27, 0xFF	; 255
 4c8:	db 12       	cpse	r13, r27
 4ca:	50 c0       	rjmp	.+160    	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
        penY = detY;
      }
    }

 
    send16(max7219MakePacket(cmdINT, 0x07)); // 1/2 brightness (C/15)
 4cc:	67 e0       	ldi	r22, 0x07	; 7
 4ce:	8a e0       	ldi	r24, 0x0A	; 10
 4d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <max7219MakePacket>
 4d4:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
    for (i = 0; i < 8; i++)
    { // clear image
      image[i] = 0x00;
 4d8:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <image>
 4dc:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <image+0x1>
 4e0:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <image+0x2>
 4e4:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <image+0x3>
 4e8:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <image+0x4>
 4ec:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <image+0x5>
 4f0:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <image+0x6>
 4f4:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <image+0x7>
 4f8:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <penX>
 4fc:	97 01       	movw	r18, r14
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 500:	22 0f       	add	r18, r18
 502:	8a 95       	dec	r24
 504:	ea f7       	brpl	.-6      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 506:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <penY>
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	fc 01       	movw	r30, r24
 50e:	ea 53       	subi	r30, 0x3A	; 58
 510:	fb 4f       	sbci	r31, 0xFB	; 251
 512:	40 81       	ld	r20, Z
    }
    if(delete){
 514:	50 91 c5 04 	lds	r21, 0x04C5	; 0x8004c5 <delete>
 518:	55 23       	and	r21, r21
 51a:	09 f4       	brne	.+2      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 51c:	86 c0       	rjmp	.+268    	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
      image2[penY] &= (~(1<<penX)); // erase 
 51e:	20 95       	com	r18
 520:	24 23       	and	r18, r20
 522:	20 83       	st	Z, r18
      continue;
 524:	96 cf       	rjmp	.-212    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>

      if (step < 0xFE)
      {
        for (int i = 0; i < 8; i++)
        {
          image[i] = step;
 526:	10 93 ce 04 	sts	0x04CE, r17	; 0x8004ce <image>
 52a:	10 93 cf 04 	sts	0x04CF, r17	; 0x8004cf <image+0x1>
 52e:	10 93 d0 04 	sts	0x04D0, r17	; 0x8004d0 <image+0x2>
 532:	10 93 d1 04 	sts	0x04D1, r17	; 0x8004d1 <image+0x3>
 536:	10 93 d2 04 	sts	0x04D2, r17	; 0x8004d2 <image+0x4>
 53a:	10 93 d3 04 	sts	0x04D3, r17	; 0x8004d3 <image+0x5>
 53e:	10 93 d4 04 	sts	0x04D4, r17	; 0x8004d4 <image+0x6>
 542:	10 93 d5 04 	sts	0x04D5, r17	; 0x8004d5 <image+0x7>
        }
        max7219Blit(image);
 546:	8e ec       	ldi	r24, 0xCE	; 206
 548:	94 e0       	ldi	r25, 0x04	; 4
 54a:	0e 94 b0 01 	call	0x360	; 0x360 <max7219Blit>
        Delay(DET_DELAY); // 'finish scanning and accept new data' delay
 54e:	68 eb       	ldi	r22, 0xB8	; 184
 550:	7b e0       	ldi	r23, 0x0B	; 11
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
        Flag = 0;
 55a:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <Flag>
        Delay(DET_DELAY); // Change this delay down to about 3000 min. for high-speed scanning.
 55e:	68 eb       	ldi	r22, 0xB8	; 184
 560:	7b e0       	ldi	r23, 0x0B	; 11
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
 56a:	81 cf       	rjmp	.-254    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>

  while (1)
  {

    send16(max7219MakePacket(cmdINT, 0x06)); // 1/2 brightness (7/15)
    detX = detY = -1;
 56c:	cc 24       	eor	r12, r12
 56e:	ca 94       	dec	r12
 570:	10 e0       	ldi	r17, 0x00	; 0
 572:	00 e0       	ldi	r16, 0x00	; 0
    if (detX != -1)
    {
      uint8_t step = 0x00;
      while (step < 0xFE)
      {
        uint8_t flagIndex = Flag ? 1 : 0;
 574:	20 91 e1 04 	lds	r18, 0x04E1	; 0x8004e1 <Flag>
        State currentStateY = stateTable[step];
 578:	00 0f       	add	r16, r16
 57a:	11 1f       	adc	r17, r17
 57c:	00 0f       	add	r16, r16
 57e:	11 1f       	adc	r17, r17
 580:	f8 01       	movw	r30, r16
 582:	e0 50       	subi	r30, 0x00	; 0
 584:	ff 4f       	sbci	r31, 0xFF	; 255
 586:	80 81       	ld	r24, Z
 588:	91 81       	ldd	r25, Z+1	; 0x01
 58a:	a2 81       	ldd	r26, Z+2	; 0x02
 58c:	b3 81       	ldd	r27, Z+3	; 0x03
 58e:	89 83       	std	Y+1, r24	; 0x01
 590:	9a 83       	std	Y+2, r25	; 0x02
 592:	ab 83       	std	Y+3, r26	; 0x03
 594:	bc 83       	std	Y+4, r27	; 0x04
    if (detX != -1)
    {
      uint8_t step = 0x00;
      while (step < 0xFE)
      {
        uint8_t flagIndex = Flag ? 1 : 0;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	21 11       	cpse	r18, r1
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	80 e0       	ldi	r24, 0x00	; 0
        State currentStateY = stateTable[step];

        // step step step
        step = currentStateY.nextState[flagIndex];
 5a2:	e1 e0       	ldi	r30, 0x01	; 1
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	ec 0f       	add	r30, r28
 5a8:	fd 1f       	adc	r31, r29
 5aa:	e8 0f       	add	r30, r24
 5ac:	f9 1f       	adc	r31, r25
 5ae:	00 81       	ld	r16, Z

        // Update y detection if needed
        if (currentStateY.detValue[flagIndex] != 0xFF)
 5b0:	e3 e0       	ldi	r30, 0x03	; 3
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	ec 0f       	add	r30, r28
 5b6:	fd 1f       	adc	r31, r29
 5b8:	8e 0f       	add	r24, r30
 5ba:	9f 1f       	adc	r25, r31
 5bc:	dc 01       	movw	r26, r24
 5be:	8c 91       	ld	r24, X
 5c0:	8f 3f       	cpi	r24, 0xFF	; 255
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        {
          detY = currentStateY.detValue[flagIndex];
 5c4:	c8 2e       	mov	r12, r24
        }

        if (step < 0xFE)
 5c6:	0e 3f       	cpi	r16, 0xFE	; 254
 5c8:	48 f0       	brcs	.+18     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
          Flag = 0;
          Delay(DET_DELAY); // Change this delay down to about 3000 min. for high-speed scanning.
        }
      }

      if (detY != -1)
 5ca:	ef ef       	ldi	r30, 0xFF	; 255
 5cc:	ce 16       	cp	r12, r30
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5d0:	7d cf       	rjmp	.-262    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
      { // Accept the position if we got an X and Y
        penX = detX;
 5d2:	d0 92 d7 04 	sts	0x04D7, r13	; 0x8004d7 <penX>
        penY = detY;
 5d6:	c0 92 d6 04 	sts	0x04D6, r12	; 0x8004d6 <penY>
 5da:	78 cf       	rjmp	.-272    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 5dc:	10 e0       	ldi	r17, 0x00	; 0
 5de:	ee ec       	ldi	r30, 0xCE	; 206
 5e0:	f4 e0       	ldi	r31, 0x04	; 4
          detY = currentStateY.detValue[flagIndex];
        }

        if (step < 0xFE)
        {
          for (int i = 0; i < 8; i++)
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	20 e0       	ldi	r18, 0x00	; 0
          {
            image[i] = (step & (1 << i)) ? 0xFF : 0x00;
 5e6:	c8 01       	movw	r24, r16
 5e8:	02 2e       	mov	r0, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 5ec:	95 95       	asr	r25
 5ee:	87 95       	ror	r24
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
 5f4:	81 70       	andi	r24, 0x01	; 1
 5f6:	81 95       	neg	r24
 5f8:	81 93       	st	Z+, r24
          detY = currentStateY.detValue[flagIndex];
        }

        if (step < 0xFE)
        {
          for (int i = 0; i < 8; i++)
 5fa:	2f 5f       	subi	r18, 0xFF	; 255
 5fc:	3f 4f       	sbci	r19, 0xFF	; 255
 5fe:	28 30       	cpi	r18, 0x08	; 8
 600:	31 05       	cpc	r19, r1
 602:	89 f7       	brne	.-30     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
          {
            image[i] = (step & (1 << i)) ? 0xFF : 0x00;
          }
          max7219Blit(image);
 604:	8e ec       	ldi	r24, 0xCE	; 206
 606:	94 e0       	ldi	r25, 0x04	; 4
 608:	0e 94 b0 01 	call	0x360	; 0x360 <max7219Blit>
          Delay(DET_DELAY); // 'finish scanning and accept new data' delay
 60c:	68 eb       	ldi	r22, 0xB8	; 184
 60e:	7b e0       	ldi	r23, 0x0B	; 11
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
          Flag = 0;
 618:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <Flag>
          Delay(DET_DELAY); // Change this delay down to about 3000 min. for high-speed scanning.
 61c:	68 eb       	ldi	r22, 0xB8	; 184
 61e:	7b e0       	ldi	r23, 0x0B	; 11
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Delay>
 628:	a5 cf       	rjmp	.-182    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
    }
    if(delete){
      image2[penY] &= (~(1<<penX)); // erase 
      continue;
    }
    image[penY] = (1 << penX);
 62a:	82 53       	subi	r24, 0x32	; 50
 62c:	9b 4f       	sbci	r25, 0xFB	; 251
 62e:	dc 01       	movw	r26, r24
 630:	2c 93       	st	X, r18
    image2[penY] |= (1<<penX);  ;
 632:	24 2b       	or	r18, r20
 634:	20 83       	st	Z, r18
    send16(max7219MakePacket(cmdINT, 0x0C)); // 1/2 brightness (C/15)
 636:	6c e0       	ldi	r22, 0x0C	; 12
 638:	8a e0       	ldi	r24, 0x0A	; 10
 63a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <max7219MakePacket>
 63e:	0e 94 57 01 	call	0x2ae	; 0x2ae <send16>
    max7219Blit(image2);
 642:	86 ec       	ldi	r24, 0xC6	; 198
 644:	94 e0       	ldi	r25, 0x04	; 4
 646:	0e 94 b0 01 	call	0x360	; 0x360 <max7219Blit>
 64a:	fd ce       	rjmp	.-518    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
