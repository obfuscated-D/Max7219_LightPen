
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000370  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000404  2**0
                  ALLOC
  3 .stab         00001248  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7f  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000025cb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000031ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  88:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupInt>:
}



void setupInt() {        
  EICRA = (1<<ISC10) | (1<<ISC00);  // we need to set up int0 and int1 to trigger interrupts on both edges         
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK = (1<<INT0) | (0<<INT1); // then enable them.
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	8d bb       	out	0x1d, r24	; 29
  9a:	08 95       	ret

0000009c <__vector_1>:
}
 

ISR(INT0_vect){ // the scanning produces brief pulses, we just need to know if it saw one since we last cleared the flag.
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
   Flag = 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <send16>:


// send a 16bit word, msb first
void send16 (unsigned int bits) {
  unsigned int temp;  
  CSlow();
  ba:	2a 98       	cbi	0x05, 2	; 5
  bc:	40 e1       	ldi	r20, 0x10	; 16
  be:	50 e0       	ldi	r21, 0x00	; 0
  for( temp = (0x0001<<15); temp != 0; temp >>= 1) {    
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e8       	ldi	r19, 0x80	; 128
  c4:	0d c0       	rjmp	.+26     	; 0xe0 <send16+0x26>
    if ( (bits & temp) != 0 ) {    SendOne();
  c6:	2b 9a       	sbi	0x05, 3	; 5
    } else {                       SendZero();
  c8:	2d 98       	cbi	0x05, 5	; 5
  ca:	00 00       	nop
  cc:	00 00       	nop
  ce:	2d 9a       	sbi	0x05, 5	; 5
  d0:	00 00       	nop
    }    
   NOP();
  d2:	00 00       	nop
   NOP();
  d4:	00 00       	nop

// send a 16bit word, msb first
void send16 (unsigned int bits) {
  unsigned int temp;  
  CSlow();
  for( temp = (0x0001<<15); temp != 0; temp >>= 1) {    
  d6:	36 95       	lsr	r19
  d8:	27 95       	ror	r18
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	51 09       	sbc	r21, r1
  de:	39 f0       	breq	.+14     	; 0xee <send16+0x34>
    if ( (bits & temp) != 0 ) {    SendOne();
  e0:	bc 01       	movw	r22, r24
  e2:	62 23       	and	r22, r18
  e4:	73 23       	and	r23, r19
  e6:	67 2b       	or	r22, r23
  e8:	71 f7       	brne	.-36     	; 0xc6 <send16+0xc>
    } else {                       SendZero();
  ea:	2b 98       	cbi	0x05, 3	; 5
  ec:	ed cf       	rjmp	.-38     	; 0xc8 <send16+0xe>
    }    
   NOP();
   NOP();
  } 
  CShigh();
  ee:	2a 9a       	sbi	0x05, 2	; 5
  f0:	08 95       	ret

000000f2 <max7219MakePacket>:
}

unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
  f2:	70 e0       	ldi	r23, 0x00	; 0
}
  f4:	9b 01       	movw	r18, r22
  f6:	38 2b       	or	r19, r24
  f8:	c9 01       	movw	r24, r18
  fa:	08 95       	ret

000000fc <max7219Init>:


void max7219Init( ) { 
   send16(max7219MakePacket(cmdPOWER,  0x01));   // wakeup
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	9c e0       	ldi	r25, 0x0C	; 12
 100:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdTEST,   0x00));   // no test mode   
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	9d e0       	ldi	r25, 0x0D	; 13
 108:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdINT,    0x07)); // 1/2 brightness (8/15)     
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	9a e0       	ldi	r25, 0x0A	; 10
 110:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdSCAN,   0xFF)); // all digits
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9b e0       	ldi	r25, 0x0B	; 11
 118:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdMODE,   0x00)); // no decode
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	99 e0       	ldi	r25, 0x09	; 9
 120:	0e 94 5d 00 	call	0xba	; 0xba <send16>
  // send16(max7219MakePacket(cmdMODE,   0xFF));  // all decode
  
   send16(max7219MakePacket(cmdDIG0+0, 0x00)); // dots!
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+1, 0x00)); // dots!
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+2, 0x00)); // dots!
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+3, 0x00)); // dots!
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+4, 0xFF)); // dots!
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	95 e0       	ldi	r25, 0x05	; 5
 148:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+5, 0xFF)); // dots!
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	96 e0       	ldi	r25, 0x06	; 6
 150:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+6, 0xFF)); // dots!
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	97 e0       	ldi	r25, 0x07	; 7
 158:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+7, 0xFF)); // dots! 
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	98 e0       	ldi	r25, 0x08	; 8
 160:	0c 94 5d 00 	jmp	0xba	; 0xba <send16>

00000164 <max7219SetDisplay>:
    
}

void max7219SetDisplay( unsigned char digit, unsigned char v)   { 
   digit &= 0x07;
   send16(max7219MakePacket(cmdDIG0+digit, v));       
 164:	87 70       	andi	r24, 0x07	; 7
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	28 0f       	add	r18, r24
 16a:	86 2f       	mov	r24, r22
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	92 2b       	or	r25, r18
 170:	0c 94 5d 00 	jmp	0xba	; 0xba <send16>

00000174 <max7219Blit>:
}

void max7219Blit( uint8_t *i) {
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
 17a:	88 81       	ld	r24, Y
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	91 60       	ori	r25, 0x01	; 1
 180:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	92 60       	ori	r25, 0x02	; 2
 18a:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	93 60       	ori	r25, 0x03	; 3
 194:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	94 60       	ori	r25, 0x04	; 4
 19e:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	95 60       	ori	r25, 0x05	; 5
 1a8:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	96 60       	ori	r25, 0x06	; 6
 1b2:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
 1b6:	8e 81       	ldd	r24, Y+6	; 0x06
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	97 60       	ori	r25, 0x07	; 7
 1bc:	0e 94 5d 00 	call	0xba	; 0xba <send16>
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
 1c0:	8f 81       	ldd	r24, Y+7	; 0x07
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	98 60       	ori	r25, 0x08	; 8
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
 1ca:	0c 94 5d 00 	jmp	0xba	; 0xba <send16>

000001ce <max7219SetIntensity>:
}

void max7219SetIntensity( unsigned char v)   { send16(max7219MakePacket(cmdINT, v)); }
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9a 60       	ori	r25, 0x0A	; 10
 1d2:	0c 94 5d 00 	jmp	0xba	; 0xba <send16>

000001d6 <max7219SetScanLimit>:
void max7219SetScanLimit( unsigned char v)   { send16(max7219MakePacket(cmdSCAN, v)); }
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9b 60       	ori	r25, 0x0B	; 11
 1da:	0c 94 5d 00 	jmp	0xba	; 0xba <send16>

000001de <max7219SetDecodeFlags>:
void max7219SetDecodeFlags( unsigned char v) { send16(max7219MakePacket(cmdMODE, v)); }
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	99 60       	ori	r25, 0x09	; 9
 1e2:	0c 94 5d 00 	jmp	0xba	; 0xba <send16>

000001e6 <Delay>:
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <Delay+0xc>
 1e8:	00 00       	nop
 1ea:	61 50       	subi	r22, 0x01	; 1
 1ec:	71 09       	sbc	r23, r1
 1ee:	81 09       	sbc	r24, r1
 1f0:	91 09       	sbc	r25, r1
 1f2:	61 15       	cp	r22, r1
 1f4:	71 05       	cpc	r23, r1
 1f6:	81 05       	cpc	r24, r1
 1f8:	91 05       	cpc	r25, r1
 1fa:	b1 f7       	brne	.-20     	; 0x1e8 <Delay+0x2>
 1fc:	08 95       	ret

000001fe <main>:


void setupInt(void);


int main( void ) {
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	28 97       	sbiw	r28, 0x08	; 8
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
 uint8_t step;
 

    // set up directions 
  
  DDRB = (INPUT << PB0 | INPUT << PB1 |OUTPUT << PB2 |OUTPUT << PB3 | INPUT << PB4 |OUTPUT << PB5 | INPUT << PB6 | INPUT << PB7);
 212:	8c e2       	ldi	r24, 0x2C	; 44
 214:	84 b9       	out	0x04, r24	; 4
  DDRD = (INPUT << PD0 | INPUT << PD1 | INPUT << PD2 | INPUT << PD3 | INPUT << PD4 | INPUT << PD5 | INPUT << PD6 |INPUT << PD7);        
 216:	1a b8       	out	0x0a, r1	; 10
  DDRC = (INPUT << PC0 | INPUT << PC1 | INPUT << PC2 | INPUT << PC3 | INPUT << PC4 | INPUT << PC5 | INPUT << PC6 ); 
 218:	17 b8       	out	0x07, r1	; 7

  max7219Init();
 21a:	0e 94 7e 00 	call	0xfc	; 0xfc <max7219Init>
}



void setupInt() {        
  EICRA = (1<<ISC10) | (1<<ISC00);  // we need to set up int0 and int1 to trigger interrupts on both edges         
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK = (1<<INT0) | (0<<INT1); // then enable them.
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	8d bb       	out	0x1d, r24	; 29
  DDRD = (INPUT << PD0 | INPUT << PD1 | INPUT << PD2 | INPUT << PD3 | INPUT << PD4 | INPUT << PD5 | INPUT << PD6 |INPUT << PD7);        
  DDRC = (INPUT << PC0 | INPUT << PC1 | INPUT << PC2 | INPUT << PC3 | INPUT << PC4 | INPUT << PC5 | INPUT << PC6 ); 

  max7219Init();
  setupInt();
  sei(); 
 228:	78 94       	sei

  penX = penY = 0;
 22a:	a1 2c       	mov	r10, r1
 22c:	b1 2c       	mov	r11, r1
 22e:	8e 01       	movw	r16, r28
 230:	07 5f       	subi	r16, 0xF7	; 247
 232:	1f 4f       	sbci	r17, 0xFF	; 255
  send16(max7219MakePacket(cmdINT,    0x0E)); // 1/2 brightness (7/15)     
  detX = detY = -1;      
  
  SetBit(6, PORTD);// started scan
  
  for( i = 0; i < 8; i++) image[i] = 0xFF; // set all leds, to search for ANY pixel.
 234:	77 24       	eor	r7, r7
 236:	7a 94       	dec	r7
      for( y = 0; y < 8; y++ ) {
	image[y] = 0x00;
	for(x = 0; x < 8; x++ ) {
          c--;
          image[y] |= (i<<x);
	  i = (c==0)?0x01-i:i;
 238:	88 24       	eor	r8, r8
 23a:	83 94       	inc	r8
      Delay(400000);
      detX = Flag?(detX|step):detX;
    }    
  
    // Then process the resulting pixel number a bit.
    penY = 7-(detX >> 3);
 23c:	27 e0       	ldi	r18, 0x07	; 7
 23e:	52 2e       	mov	r5, r18
   send16(max7219MakePacket(cmdINT,    0x02)); // 1/2 brightness (C/15)     
     for( i = 0; i < 8; i++) { // clear image
       image[i] = 0x00;
     }
     
     image[penY] = (1<<penX);
 240:	cc 24       	eor	r12, r12
 242:	c3 94       	inc	r12
 244:	d1 2c       	mov	r13, r1
  penX = penY = 0;

   
  while(1) {
  
  send16(max7219MakePacket(cmdINT,    0x0E)); // 1/2 brightness (7/15)     
 246:	6e e0       	ldi	r22, 0x0E	; 14
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	0e 94 79 00 	call	0xf2	; 0xf2 <max7219MakePacket>
 24e:	0e 94 5d 00 	call	0xba	; 0xba <send16>
  detX = detY = -1;      
  
  SetBit(6, PORTD);// started scan
 252:	5e 9a       	sbi	0x0b, 6	; 11
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	7c 01       	movw	r14, r24
 25a:	fc 01       	movw	r30, r24
  
  for( i = 0; i < 8; i++) image[i] = 0xFF; // set all leds, to search for ANY pixel.
 25c:	71 92       	st	Z+, r7
 25e:	0e 17       	cp	r16, r30
 260:	1f 07       	cpc	r17, r31
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x5e>
  max7219Blit( image );   
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 ba 00 	call	0x174	; 0x174 <max7219Blit>
  Delay(800); // this is a 'finish scanning and accept new data' delay
 26c:	60 e2       	ldi	r22, 0x20	; 32
 26e:	73 e0       	ldi	r23, 0x03	; 3
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Delay>
  Flag = 0;
 278:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  Delay(4000);
 27c:	60 ea       	ldi	r22, 0xA0	; 160
 27e:	7f e0       	ldi	r23, 0x0F	; 15
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Delay>
  
  if (Flag) { // I saws a pixel!
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	88 23       	and	r24, r24
 28e:	09 f4       	brne	.+2      	; 0x292 <main+0x94>
 290:	48 c0       	rjmp	.+144    	; 0x322 <main+0x124>
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	a8 2e       	mov	r10, r24
 296:	b1 2c       	mov	r11, r1
 298:	90 e2       	ldi	r25, 0x20	; 32
 29a:	99 2e       	mov	r9, r25
 29c:	61 2c       	mov	r6, r1
  while(1) {
  
  send16(max7219MakePacket(cmdINT,    0x0E)); // 1/2 brightness (7/15)     
  detX = detY = -1;      
  
  SetBit(6, PORTD);// started scan
 29e:	fe 01       	movw	r30, r28
 2a0:	31 96       	adiw	r30, 0x01	; 1
 2a2:	29 2d       	mov	r18, r9
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
      c = step;
      i = 1;
      for( y = 0; y < 8; y++ ) {
	image[y] = 0x00;
	for(x = 0; x < 8; x++ ) {
          c--;
 2ac:	21 50       	subi	r18, 0x01	; 1
          image[y] |= (i<<x);
 2ae:	46 2f       	mov	r20, r22
 2b0:	08 2e       	mov	r0, r24
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <main+0xb8>
 2b4:	44 0f       	add	r20, r20
 2b6:	0a 94       	dec	r0
 2b8:	ea f7       	brpl	.-6      	; 0x2b4 <main+0xb6>
 2ba:	34 2b       	or	r19, r20
	  i = (c==0)?0x01-i:i;
 2bc:	21 11       	cpse	r18, r1
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <main+0xca>
 2c0:	28 2d       	mov	r18, r8
 2c2:	26 1b       	sub	r18, r22
 2c4:	62 2f       	mov	r22, r18
 2c6:	29 2d       	mov	r18, r9
 2c8:	01 96       	adiw	r24, 0x01	; 1
    for(step = 32; step != 0; step >>= 1 ) {
      c = step;
      i = 1;
      for( y = 0; y < 8; y++ ) {
	image[y] = 0x00;
	for(x = 0; x < 8; x++ ) {
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	91 05       	cpc	r25, r1
 2ce:	71 f7       	brne	.-36     	; 0x2ac <main+0xae>
 2d0:	31 93       	st	Z+, r19
  
    detX = 0;
    for(step = 32; step != 0; step >>= 1 ) {
      c = step;
      i = 1;
      for( y = 0; y < 8; y++ ) {
 2d2:	0e 17       	cp	r16, r30
 2d4:	1f 07       	cpc	r17, r31
 2d6:	39 f7       	brne	.-50     	; 0x2a6 <main+0xa8>
          image[y] |= (i<<x);
	  i = (c==0)?0x01-i:i;
	  c = (c==0)?step:c;
	} 
      } 
      max7219Blit( image );   
 2d8:	ce 01       	movw	r24, r28
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	0e 94 ba 00 	call	0x174	; 0x174 <max7219Blit>
      Delay(800); // this is a 'finish scanning and accept new data' delay
 2e0:	60 e2       	ldi	r22, 0x20	; 32
 2e2:	73 e0       	ldi	r23, 0x03	; 3
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Delay>
      Flag = 0;
 2ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
      Delay(400000);
 2f0:	60 e8       	ldi	r22, 0x80	; 128
 2f2:	7a e1       	ldi	r23, 0x1A	; 26
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Delay>
      detX = Flag?(detX|step):detX;
 2fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 300:	81 11       	cpse	r24, r1
 302:	69 28       	or	r6, r9
  Delay(4000);
  
  if (Flag) { // I saws a pixel!
  
    detX = 0;
    for(step = 32; step != 0; step >>= 1 ) {
 304:	96 94       	lsr	r9
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	a8 1a       	sub	r10, r24
 30a:	b1 08       	sbc	r11, r1
 30c:	41 f6       	brne	.-112    	; 0x29e <main+0xa0>
      Delay(400000);
      detX = Flag?(detX|step):detX;
    }    
  
    // Then process the resulting pixel number a bit.
    penY = 7-(detX >> 3);
 30e:	86 2d       	mov	r24, r6
 310:	85 95       	asr	r24
 312:	85 95       	asr	r24
 314:	85 95       	asr	r24
 316:	a5 2c       	mov	r10, r5
 318:	a8 1a       	sub	r10, r24
    penX = 7-(detX & 0x07);
 31a:	86 2d       	mov	r24, r6
 31c:	80 95       	com	r24
 31e:	87 70       	andi	r24, 0x07	; 7
 320:	b8 2e       	mov	r11, r24
  
  }   
  ClearBit(6, PORTD); // scan done.         
 322:	5e 98       	cbi	0x0b, 6	; 11
   
   send16(max7219MakePacket(cmdINT,    0x02)); // 1/2 brightness (C/15)     
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	0e 94 79 00 	call	0xf2	; 0xf2 <max7219MakePacket>
 32c:	0e 94 5d 00 	call	0xba	; 0xba <send16>
     for( i = 0; i < 8; i++) { // clear image
       image[i] = 0x00;
 330:	f7 01       	movw	r30, r14
 332:	11 92       	st	Z+, r1
 334:	7f 01       	movw	r14, r30
  
  }   
  ClearBit(6, PORTD); // scan done.         
   
   send16(max7219MakePacket(cmdINT,    0x02)); // 1/2 brightness (C/15)     
     for( i = 0; i < 8; i++) { // clear image
 336:	0e 17       	cp	r16, r30
 338:	1f 07       	cpc	r17, r31
 33a:	d1 f7       	brne	.-12     	; 0x330 <main+0x132>
       image[i] = 0x00;
     }
     
     image[penY] = (1<<penX);
 33c:	c6 01       	movw	r24, r12
 33e:	0b 2c       	mov	r0, r11
 340:	01 c0       	rjmp	.+2      	; 0x344 <main+0x146>
 342:	88 0f       	add	r24, r24
 344:	0a 94       	dec	r0
 346:	ea f7       	brpl	.-6      	; 0x342 <main+0x144>
 348:	e1 e0       	ldi	r30, 0x01	; 1
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	ec 0f       	add	r30, r28
 34e:	fd 1f       	adc	r31, r29
 350:	ea 0d       	add	r30, r10
 352:	f1 1d       	adc	r31, r1
 354:	80 83       	st	Z, r24
     
     max7219Blit( image );   
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 ba 00 	call	0x174	; 0x174 <max7219Blit>
     
     Delay(1600000);   //<--- this is the amount of time to show the detected location before searching again.
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	7a e6       	ldi	r23, 0x6A	; 106
 362:	88 e1       	ldi	r24, 0x18	; 24
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Delay>
   
  }
 36a:	6d cf       	rjmp	.-294    	; 0x246 <main+0x48>

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
