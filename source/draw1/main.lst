
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000836  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000008ca  2**0
                  ALLOC
  3 .stab         000015cc  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000faf  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002e47  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e58  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 97 03 	call	0x72e	; 0x72e <main>
  88:	0c 94 19 04 	jmp	0x832	; 0x832 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GetLoc>:





void GetLoc() {
  90:	9f 92       	push	r9
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	28 97       	sbiw	r28, 0x08	; 8
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
  uint8_t giveup;
  int8_t detX, detY;
  uint8_t step;
  uint8_t i;
 
  send16(max7219MakePacket(cmdINT,  0x0F)); // 1/2 brightness (7/15)     
  b6:	6f e0       	ldi	r22, 0x0F	; 15
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	0e 94 11 03 	call	0x622	; 0x622 <max7219MakePacket>
  be:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
  
  detX = detY = -1;
  giveup = 3;  
  SetBit(6, PORTD);
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  uint8_t step;
  uint8_t i;
 
  send16(max7219MakePacket(cmdINT,  0x0F)); // 1/2 brightness (7/15)     
  
  detX = detY = -1;
  c4:	1f ef       	ldi	r17, 0xFF	; 255
  c6:	7e 01       	movw	r14, r28
  c8:	29 e0       	ldi	r18, 0x09	; 9
  ca:	e2 0e       	add	r14, r18
  cc:	f1 1c       	adc	r15, r1
  giveup = 3;  
  SetBit(6, PORTD);
  
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
  ce:	1f 3f       	cpi	r17, 0xFF	; 255
  d0:	09 f0       	breq	.+2      	; 0xd4 <GetLoc+0x44>
  d2:	52 c1       	rjmp	.+676    	; 0x378 <GetLoc+0x2e8>
  d4:	06 e0       	ldi	r16, 0x06	; 6
  d6:	99 24       	eor	r9, r9
  d8:	9a 94       	dec	r9
  da:	10 e0       	ldi	r17, 0x00	; 0
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
  dc:	1f 30       	cpi	r17, 0x0F	; 15
  de:	09 f4       	brne	.+2      	; 0xe2 <GetLoc+0x52>
  e0:	db c0       	rjmp	.+438    	; 0x298 <GetLoc+0x208>
  e2:	08 f4       	brcc	.+2      	; 0xe6 <GetLoc+0x56>
  e4:	ee c1       	rjmp	.+988    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
  e6:	10 34       	cpi	r17, 0x40	; 64
  e8:	09 f4       	brne	.+2      	; 0xec <GetLoc+0x5c>
  ea:	a5 c0       	rjmp	.+330    	; 0x236 <GetLoc+0x1a6>
  ec:	08 f0       	brcs	.+2      	; 0xf0 <GetLoc+0x60>
  ee:	23 c2       	rjmp	.+1094   	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
  f0:	10 32       	cpi	r17, 0x20	; 32
  f2:	09 f4       	brne	.+2      	; 0xf6 <GetLoc+0x66>
  f4:	93 c0       	rjmp	.+294    	; 0x21c <GetLoc+0x18c>
  f6:	10 33       	cpi	r17, 0x30	; 48
  f8:	09 f4       	brne	.+2      	; 0xfc <GetLoc+0x6c>
  fa:	89 c0       	rjmp	.+274    	; 0x20e <GetLoc+0x17e>
  fc:	10 31       	cpi	r17, 0x10	; 16
  fe:	d1 f0       	breq	.+52     	; 0x134 <GetLoc+0xa4>
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
	  case 0x20: step = Flag?0xFE:0xFF; detX = Flag?5:detX; break;
	  case 0xC0: step = Flag?0x40:0xFF; break;
	  case 0x40: step = Flag?0xFE:0x80; detX = Flag?6:detX; break;
	  case 0x80: step = Flag?0xFE:0xFF; detX = Flag?7:detX; break;
	  default:   step = 0x0F;           break;        
 100:	1f e0       	ldi	r17, 0x0F	; 15
 102:	fe 01       	movw	r30, r28
 104:	31 96       	adiw	r30, 0x01	; 1
	}
	if (step < 0xFE) {
	 for( i = 0; i<8; i++) {
	   image[i] = step;
 106:	11 93       	st	Z+, r17
	  case 0x40: step = Flag?0xFE:0x80; detX = Flag?6:detX; break;
	  case 0x80: step = Flag?0xFE:0xFF; detX = Flag?7:detX; break;
	  default:   step = 0x0F;           break;        
	}
	if (step < 0xFE) {
	 for( i = 0; i<8; i++) {
 108:	ee 16       	cp	r14, r30
 10a:	ff 06       	cpc	r15, r31
 10c:	e1 f7       	brne	.-8      	; 0x106 <GetLoc+0x76>
	   image[i] = step;
	 } 
	 max7219Blit( image );   
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0e 94 52 03 	call	0x6a4	; 0x6a4 <max7219Blit>
	 Delay(2000); // this is a 'finish scanning and accept new data' delay
 116:	60 ed       	ldi	r22, 0xD0	; 208
 118:	77 e0       	ldi	r23, 0x07	; 7
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 8b 03 	call	0x716	; 0x716 <Delay>
	 Flag = 0;
 122:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Flag>
	 Delay(3600); // <---------- change this delay down to about 3000 min. for high speed scanning.
 126:	60 e1       	ldi	r22, 0x10	; 16
 128:	7e e0       	ldi	r23, 0x0E	; 14
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 8b 03 	call	0x716	; 0x716 <Delay>
 132:	d4 cf       	rjmp	.-88     	; 0xdc <GetLoc+0x4c>
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
	  case 0x08: step = Flag?0xFE:0xFF; detX = Flag?3:detX; break;
	  case 0x30: step = Flag?0x10:0xC0; break;
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
 134:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 138:	88 23       	and	r24, r24
 13a:	09 f4       	brne	.+2      	; 0x13e <GetLoc+0xae>
 13c:	b3 c0       	rjmp	.+358    	; 0x2a4 <GetLoc+0x214>
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 142:	81 11       	cpse	r24, r1
 144:	33 c1       	rjmp	.+614    	; 0x3ac <GetLoc+0x31c>
 146:	01 50       	subi	r16, 0x01	; 1
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	09 f4       	brne	.+2      	; 0x14e <GetLoc+0xbe>
 14c:	5a c0       	rjmp	.+180    	; 0x202 <GetLoc+0x172>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	92 12       	cpse	r9, r18
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	89 23       	and	r24, r25
  detX = detY = -1;
  giveup = 3;  
  SetBit(6, PORTD);
  
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
 158:	09 f0       	breq	.+2      	; 0x15c <GetLoc+0xcc>
 15a:	bd cf       	rjmp	.-134    	; 0xd6 <GetLoc+0x46>
 15c:	a0 2e       	mov	r10, r16
 15e:	b1 2c       	mov	r11, r1
	 Flag = 0;
	 Delay(3600); // <---------- change this delay down to about 3000 min. for high speed scanning.
	}
      }
    } 
     if (detX != -1) {
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	98 16       	cp	r9, r24
 164:	09 f4       	brne	.+2      	; 0x168 <GetLoc+0xd8>
 166:	79 c0       	rjmp	.+242    	; 0x25a <GetLoc+0x1ca>
 168:	19 2d       	mov	r17, r9
  detX = detY = -1;
  giveup = 3;  
  SetBit(6, PORTD);
  
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
 16a:	00 e0       	ldi	r16, 0x00	; 0
 16c:	99 24       	eor	r9, r9
 16e:	9a 94       	dec	r9
    } 
     if (detX != -1) {

       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
 170:	0f 30       	cpi	r16, 0x0F	; 15
 172:	09 f4       	brne	.+2      	; 0x176 <GetLoc+0xe6>
 174:	c9 c0       	rjmp	.+402    	; 0x308 <GetLoc+0x278>
 176:	08 f4       	brcc	.+2      	; 0x17a <GetLoc+0xea>
 178:	1d c1       	rjmp	.+570    	; 0x3b4 <GetLoc+0x324>
 17a:	00 34       	cpi	r16, 0x40	; 64
 17c:	09 f4       	brne	.+2      	; 0x180 <GetLoc+0xf0>
 17e:	d5 c0       	rjmp	.+426    	; 0x32a <GetLoc+0x29a>
 180:	08 f0       	brcs	.+2      	; 0x184 <GetLoc+0xf4>
 182:	7c c1       	rjmp	.+760    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 184:	00 32       	cpi	r16, 0x20	; 32
 186:	09 f4       	brne	.+2      	; 0x18a <GetLoc+0xfa>
 188:	df c0       	rjmp	.+446    	; 0x348 <GetLoc+0x2b8>
 18a:	00 33       	cpi	r16, 0x30	; 48
 18c:	09 f4       	brne	.+2      	; 0x190 <GetLoc+0x100>
 18e:	c5 c0       	rjmp	.+394    	; 0x31a <GetLoc+0x28a>
 190:	00 31       	cpi	r16, 0x10	; 16
 192:	09 f4       	brne	.+2      	; 0x196 <GetLoc+0x106>
 194:	aa c0       	rjmp	.+340    	; 0x2ea <GetLoc+0x25a>
 196:	4f e0       	ldi	r20, 0x0F	; 15
 198:	50 e0       	ldi	r21, 0x00	; 0
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
	   case 0x20: step = Flag?0xFE:0xFF; detY = Flag?5:detY; break;
	   case 0xC0: step = Flag?0x40:0xFF; break;
	   case 0x40: step = Flag?0xFE:0x80; detY = Flag?6:detY; break;
	   case 0x80: step = Flag?0xFE:0xFF; detY = Flag?7:detY; break;
	   default:   step = 0x0F;           break;        
 19a:	0f e0       	ldi	r16, 0x0F	; 15
 19c:	fe 01       	movw	r30, r28
 19e:	31 96       	adiw	r30, 0x01	; 1
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
	   case 0x0F: step = Flag?0x03:0xF0; break;      
	   case 0xF0: step = Flag?0x30:0xFF; break;
	   case 0x03: step = Flag?0x01:0x0C; break;
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
	   case 0x80: step = Flag?0xFE:0xFF; detY = Flag?7:detY; break;
	   default:   step = 0x0F;           break;        
	 }
	 if (step < 0xFE) {
	  for( i = 0; i < 8; i++ ) {
	    image[i] = (step&(1<<i))?0xFF:0x00;
 1a4:	ca 01       	movw	r24, r20
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GetLoc+0x11e>
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GetLoc+0x11a>
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	81 95       	neg	r24
 1b6:	81 93       	st	Z+, r24
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
	   case 0x40: step = Flag?0xFE:0x80; detY = Flag?6:detY; break;
	   case 0x80: step = Flag?0xFE:0xFF; detY = Flag?7:detY; break;
	   default:   step = 0x0F;           break;        
	 }
	 if (step < 0xFE) {
	  for( i = 0; i < 8; i++ ) {
 1bc:	28 30       	cpi	r18, 0x08	; 8
 1be:	31 05       	cpc	r19, r1
 1c0:	89 f7       	brne	.-30     	; 0x1a4 <GetLoc+0x114>
	    image[i] = (step&(1<<i))?0xFF:0x00;
	  } 
	  max7219Blit( image );   
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <max7219Blit>
	  Delay(2000);
 1ca:	60 ed       	ldi	r22, 0xD0	; 208
 1cc:	77 e0       	ldi	r23, 0x07	; 7
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 8b 03 	call	0x716	; 0x716 <Delay>
	  Flag = 0;
 1d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Flag>
	  Delay(3600);// <---------- change this delay down to about 3000 min. for high speed scanning.
 1da:	60 e1       	ldi	r22, 0x10	; 16
 1dc:	7e e0       	ldi	r23, 0x0E	; 14
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 8b 03 	call	0x716	; 0x716 <Delay>
 1e6:	c4 cf       	rjmp	.-120    	; 0x170 <GetLoc+0xe0>
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
	  case 0x0F: step = Flag?0x03:0xF0; break;      
	  case 0xF0: step = Flag?0x30:0xFF; break;
	  case 0x03: step = Flag?0x01:0x0C; break;
	  case 0x01: step = Flag?0xFE:0x02; detX = Flag?0:detX ; break;
 1e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 1ec:	88 23       	and	r24, r24
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <GetLoc+0x162>
 1f0:	dd c1       	rjmp	.+954    	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
 1f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 1f6:	01 50       	subi	r16, 0x01	; 1
 1f8:	81 11       	cpse	r24, r1
 1fa:	e0 c1       	rjmp	.+960    	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <GetLoc+0x172>
 200:	a6 cf       	rjmp	.-180    	; 0x14e <GetLoc+0xbe>
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	92 12       	cpse	r9, r18
 20a:	a4 cf       	rjmp	.-184    	; 0x154 <GetLoc+0xc4>
 20c:	a4 cf       	rjmp	.-184    	; 0x156 <GetLoc+0xc6>
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
	  case 0x08: step = Flag?0xFE:0xFF; detX = Flag?3:detX; break;
	  case 0x30: step = Flag?0x10:0xC0; break;
 20e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 212:	88 23       	and	r24, r24
 214:	09 f4       	brne	.+2      	; 0x218 <GetLoc+0x188>
 216:	65 c0       	rjmp	.+202    	; 0x2e2 <GetLoc+0x252>
 218:	10 e1       	ldi	r17, 0x10	; 16
 21a:	73 cf       	rjmp	.-282    	; 0x102 <GetLoc+0x72>
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
	  case 0x20: step = Flag?0xFE:0xFF; detX = Flag?5:detX; break;
 21c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 220:	88 23       	and	r24, r24
 222:	09 f4       	brne	.+2      	; 0x226 <GetLoc+0x196>
 224:	48 c0       	rjmp	.+144    	; 0x2b6 <GetLoc+0x226>
 226:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 22a:	88 23       	and	r24, r24
 22c:	09 f4       	brne	.+2      	; 0x230 <GetLoc+0x1a0>
 22e:	8b cf       	rjmp	.-234    	; 0x146 <GetLoc+0xb6>
 230:	95 e0       	ldi	r25, 0x05	; 5
 232:	99 2e       	mov	r9, r25
 234:	88 cf       	rjmp	.-240    	; 0x146 <GetLoc+0xb6>
	  case 0xC0: step = Flag?0x40:0xFF; break;
	  case 0x40: step = Flag?0xFE:0x80; detX = Flag?6:detX; break;
 236:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 23a:	88 23       	and	r24, r24
 23c:	09 f4       	brne	.+2      	; 0x240 <GetLoc+0x1b0>
 23e:	48 c0       	rjmp	.+144    	; 0x2d0 <GetLoc+0x240>
 240:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 244:	88 23       	and	r24, r24
 246:	09 f4       	brne	.+2      	; 0x24a <GetLoc+0x1ba>
 248:	7e cf       	rjmp	.-260    	; 0x146 <GetLoc+0xb6>
 24a:	01 50       	subi	r16, 0x01	; 1
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	98 2e       	mov	r9, r24
 250:	a0 2e       	mov	r10, r16
 252:	b1 2c       	mov	r11, r1
	 Flag = 0;
	 Delay(3600); // <---------- change this delay down to about 3000 min. for high speed scanning.
	}
      }
    } 
     if (detX != -1) {
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	98 12       	cpse	r9, r24
 258:	87 cf       	rjmp	.-242    	; 0x168 <GetLoc+0xd8>
 25a:	00 fb       	bst	r16, 0
 25c:	cc 24       	eor	r12, r12
 25e:	c0 f8       	bld	r12, 0
 260:	d1 2c       	mov	r13, r1
 262:	1f ef       	ldi	r17, 0xFF	; 255
  
  detX = detY = -1;
  giveup = 3;  
  SetBit(6, PORTD);
  
  while((detY == -1)& giveup) {
 264:	cd 28       	or	r12, r13
 266:	09 f0       	breq	.+2      	; 0x26a <GetLoc+0x1da>
 268:	32 cf       	rjmp	.-412    	; 0xce <GetLoc+0x3e>
    }
    

     
  }
  penX = detX;
 26a:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <penX>
  penY = detY;
 26e:	90 92 00 01 	sts	0x0100, r9	; 0x800100 <__DATA_REGION_ORIGIN__>
    
  ClearBit(6, PORTD);
 272:	5e 98       	cbi	0x0b, 6	; 11
     
     

}
 274:	28 96       	adiw	r28, 0x08	; 8
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	bf 90       	pop	r11
 292:	af 90       	pop	r10
 294:	9f 90       	pop	r9
 296:	08 95       	ret
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
	  case 0x0F: step = Flag?0x03:0xF0; break;      
 298:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 29c:	88 23       	and	r24, r24
 29e:	19 f1       	breq	.+70     	; 0x2e6 <GetLoc+0x256>
 2a0:	13 e0       	ldi	r17, 0x03	; 3
 2a2:	2f cf       	rjmp	.-418    	; 0x102 <GetLoc+0x72>
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
	  case 0x08: step = Flag?0xFE:0xFF; detX = Flag?3:detX; break;
	  case 0x30: step = Flag?0x10:0xC0; break;
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
 2a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 2a8:	10 e2       	ldi	r17, 0x20	; 32
 2aa:	88 23       	and	r24, r24
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <GetLoc+0x220>
 2ae:	29 cf       	rjmp	.-430    	; 0x102 <GetLoc+0x72>
 2b0:	44 e0       	ldi	r20, 0x04	; 4
 2b2:	94 2e       	mov	r9, r20
 2b4:	26 cf       	rjmp	.-436    	; 0x102 <GetLoc+0x72>
	  case 0x20: step = Flag?0xFE:0xFF; detX = Flag?5:detX; break;
 2b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 2ba:	81 11       	cpse	r24, r1
 2bc:	b9 cf       	rjmp	.-142    	; 0x230 <GetLoc+0x1a0>
 2be:	01 50       	subi	r16, 0x01	; 1
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	98 12       	cpse	r9, r24
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	01 11       	cpse	r16, r1
 2cc:	44 cf       	rjmp	.-376    	; 0x156 <GetLoc+0xc6>
 2ce:	42 cf       	rjmp	.-380    	; 0x154 <GetLoc+0xc4>
	  case 0xC0: step = Flag?0x40:0xFF; break;
	  case 0x40: step = Flag?0xFE:0x80; detX = Flag?6:detX; break;
 2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 2d4:	10 e8       	ldi	r17, 0x80	; 128
 2d6:	88 23       	and	r24, r24
 2d8:	09 f4       	brne	.+2      	; 0x2dc <GetLoc+0x24c>
 2da:	13 cf       	rjmp	.-474    	; 0x102 <GetLoc+0x72>
 2dc:	36 e0       	ldi	r19, 0x06	; 6
 2de:	93 2e       	mov	r9, r19
 2e0:	10 cf       	rjmp	.-480    	; 0x102 <GetLoc+0x72>
	  case 0x01: step = Flag?0xFE:0x02; detX = Flag?0:detX ; break;
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
	  case 0x08: step = Flag?0xFE:0xFF; detX = Flag?3:detX; break;
	  case 0x30: step = Flag?0x10:0xC0; break;
 2e2:	10 ec       	ldi	r17, 0xC0	; 192
 2e4:	0e cf       	rjmp	.-484    	; 0x102 <GetLoc+0x72>
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
	  case 0x0F: step = Flag?0x03:0xF0; break;      
 2e6:	10 ef       	ldi	r17, 0xF0	; 240
 2e8:	0c cf       	rjmp	.-488    	; 0x102 <GetLoc+0x72>
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
	   case 0x0C: step = Flag?0x04:0xFF; break;
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
	   case 0x30: step = Flag?0x10:0xC0; break;
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
 2ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 2ee:	81 11       	cpse	r24, r1
 2f0:	47 c0       	rjmp	.+142    	; 0x380 <GetLoc+0x2f0>
 2f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 2f6:	40 e2       	ldi	r20, 0x20	; 32
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	00 e2       	ldi	r16, 0x20	; 32
 2fc:	88 23       	and	r24, r24
 2fe:	09 f4       	brne	.+2      	; 0x302 <GetLoc+0x272>
 300:	4d cf       	rjmp	.-358    	; 0x19c <GetLoc+0x10c>
 302:	e4 e0       	ldi	r30, 0x04	; 4
 304:	9e 2e       	mov	r9, r30
 306:	4a cf       	rjmp	.-364    	; 0x19c <GetLoc+0x10c>
     if (detX != -1) {

       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
	   case 0x0F: step = Flag?0x03:0xF0; break;      
 308:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 30c:	88 23       	and	r24, r24
 30e:	09 f4       	brne	.+2      	; 0x312 <GetLoc+0x282>
 310:	42 c0       	rjmp	.+132    	; 0x396 <GetLoc+0x306>
 312:	43 e0       	ldi	r20, 0x03	; 3
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	03 e0       	ldi	r16, 0x03	; 3
 318:	41 cf       	rjmp	.-382    	; 0x19c <GetLoc+0x10c>
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
	   case 0x0C: step = Flag?0x04:0xFF; break;
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
	   case 0x30: step = Flag?0x10:0xC0; break;
 31a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 31e:	88 23       	and	r24, r24
 320:	b1 f1       	breq	.+108    	; 0x38e <GetLoc+0x2fe>
 322:	40 e1       	ldi	r20, 0x10	; 16
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	00 e1       	ldi	r16, 0x10	; 16
 328:	39 cf       	rjmp	.-398    	; 0x19c <GetLoc+0x10c>
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
	   case 0x20: step = Flag?0xFE:0xFF; detY = Flag?5:detY; break;
	   case 0xC0: step = Flag?0x40:0xFF; break;
	   case 0x40: step = Flag?0xFE:0x80; detY = Flag?6:detY; break;
 32a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 32e:	81 11       	cpse	r24, r1
 330:	36 c0       	rjmp	.+108    	; 0x39e <GetLoc+0x30e>
 332:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 336:	40 e8       	ldi	r20, 0x80	; 128
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	00 e8       	ldi	r16, 0x80	; 128
 33c:	88 23       	and	r24, r24
 33e:	09 f4       	brne	.+2      	; 0x342 <GetLoc+0x2b2>
 340:	2d cf       	rjmp	.-422    	; 0x19c <GetLoc+0x10c>
 342:	76 e0       	ldi	r23, 0x06	; 6
 344:	97 2e       	mov	r9, r23
 346:	2a cf       	rjmp	.-428    	; 0x19c <GetLoc+0x10c>
	   case 0x0C: step = Flag?0x04:0xFF; break;
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
	   case 0x30: step = Flag?0x10:0xC0; break;
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
	   case 0x20: step = Flag?0xFE:0xFF; detY = Flag?5:detY; break;
 348:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 34c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 350:	88 23       	and	r24, r24
 352:	11 f0       	breq	.+4      	; 0x358 <GetLoc+0x2c8>
 354:	55 e0       	ldi	r21, 0x05	; 5
 356:	95 2e       	mov	r9, r21
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	92 16       	cp	r9, r18
 360:	11 f0       	breq	.+4      	; 0x366 <GetLoc+0x2d6>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	6c 01       	movw	r12, r24
 368:	ca 20       	and	r12, r10
 36a:	db 20       	and	r13, r11
  
  detX = detY = -1;
  giveup = 3;  
  SetBit(6, PORTD);
  
  while((detY == -1)& giveup) {
 36c:	cd 28       	or	r12, r13
 36e:	09 f4       	brne	.+2      	; 0x372 <GetLoc+0x2e2>
 370:	7c cf       	rjmp	.-264    	; 0x26a <GetLoc+0x1da>
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
 372:	1f 3f       	cpi	r17, 0xFF	; 255
 374:	09 f4       	brne	.+2      	; 0x378 <GetLoc+0x2e8>
 376:	ae ce       	rjmp	.-676    	; 0xd4 <GetLoc+0x44>
 378:	36 e0       	ldi	r19, 0x06	; 6
 37a:	a3 2e       	mov	r10, r19
 37c:	b1 2c       	mov	r11, r1
 37e:	f5 ce       	rjmp	.-534    	; 0x16a <GetLoc+0xda>
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
	   case 0x0C: step = Flag?0x04:0xFF; break;
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
	   case 0x30: step = Flag?0x10:0xC0; break;
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
 380:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 384:	88 23       	and	r24, r24
 386:	41 f3       	breq	.-48     	; 0x358 <GetLoc+0x2c8>
 388:	b4 e0       	ldi	r27, 0x04	; 4
 38a:	9b 2e       	mov	r9, r27
 38c:	6e cf       	rjmp	.-292    	; 0x26a <GetLoc+0x1da>
 38e:	40 ec       	ldi	r20, 0xC0	; 192
 390:	50 e0       	ldi	r21, 0x00	; 0
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
	   case 0x0C: step = Flag?0x04:0xFF; break;
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
	   case 0x30: step = Flag?0x10:0xC0; break;
 392:	00 ec       	ldi	r16, 0xC0	; 192
 394:	03 cf       	rjmp	.-506    	; 0x19c <GetLoc+0x10c>
 396:	40 ef       	ldi	r20, 0xF0	; 240
 398:	50 e0       	ldi	r21, 0x00	; 0
     if (detX != -1) {

       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
	   case 0x0F: step = Flag?0x03:0xF0; break;      
 39a:	00 ef       	ldi	r16, 0xF0	; 240
 39c:	ff ce       	rjmp	.-514    	; 0x19c <GetLoc+0x10c>
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
	   case 0x30: step = Flag?0x10:0xC0; break;
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
	   case 0x20: step = Flag?0xFE:0xFF; detY = Flag?5:detY; break;
	   case 0xC0: step = Flag?0x40:0xFF; break;
	   case 0x40: step = Flag?0xFE:0x80; detY = Flag?6:detY; break;
 39e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 3a2:	88 23       	and	r24, r24
 3a4:	c9 f2       	breq	.-78     	; 0x358 <GetLoc+0x2c8>
 3a6:	a6 e0       	ldi	r26, 0x06	; 6
 3a8:	9a 2e       	mov	r9, r26
 3aa:	5f cf       	rjmp	.-322    	; 0x26a <GetLoc+0x1da>
 3ac:	01 50       	subi	r16, 0x01	; 1
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
	  case 0x08: step = Flag?0xFE:0xFF; detX = Flag?3:detX; break;
	  case 0x30: step = Flag?0x10:0xC0; break;
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
 3ae:	94 e0       	ldi	r25, 0x04	; 4
 3b0:	99 2e       	mov	r9, r25
 3b2:	d4 ce       	rjmp	.-600    	; 0x15c <GetLoc+0xcc>
    } 
     if (detX != -1) {

       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
 3b4:	03 30       	cpi	r16, 0x03	; 3
 3b6:	b9 f0       	breq	.+46     	; 0x3e6 <GetLoc+0x356>
 3b8:	e8 f1       	brcs	.+122    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3ba:	08 30       	cpi	r16, 0x08	; 8
 3bc:	29 f1       	breq	.+74     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3be:	0c 30       	cpi	r16, 0x0C	; 12
 3c0:	d1 f0       	breq	.+52     	; 0x3f6 <GetLoc+0x366>
 3c2:	04 30       	cpi	r16, 0x04	; 4
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <GetLoc+0x338>
 3c6:	e7 ce       	rjmp	.-562    	; 0x196 <GetLoc+0x106>
	   case 0xF0: step = Flag?0x30:0xFF; break;
	   case 0x03: step = Flag?0x01:0x0C; break;
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
	   case 0x0C: step = Flag?0x04:0xFF; break;
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
 3c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 3cc:	81 11       	cpse	r24, r1
 3ce:	26 c0       	rjmp	.+76     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 3d4:	48 e0       	ldi	r20, 0x08	; 8
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	08 e0       	ldi	r16, 0x08	; 8
 3da:	88 23       	and	r24, r24
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <GetLoc+0x350>
 3de:	de ce       	rjmp	.-580    	; 0x19c <GetLoc+0x10c>
 3e0:	f2 e0       	ldi	r31, 0x02	; 2
 3e2:	9f 2e       	mov	r9, r31
 3e4:	db ce       	rjmp	.-586    	; 0x19c <GetLoc+0x10c>
       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
	   case 0x0F: step = Flag?0x03:0xF0; break;      
	   case 0xF0: step = Flag?0x30:0xFF; break;
	   case 0x03: step = Flag?0x01:0x0C; break;
 3e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 3ea:	88 23       	and	r24, r24
 3ec:	f9 f0       	breq	.+62     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	01 e0       	ldi	r16, 0x01	; 1
 3f4:	d3 ce       	rjmp	.-602    	; 0x19c <GetLoc+0x10c>
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
	   case 0x0C: step = Flag?0x04:0xFF; break;
 3f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 3fa:	88 23       	and	r24, r24
 3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	ac cf       	rjmp	.-168    	; 0x358 <GetLoc+0x2c8>
 400:	44 e0       	ldi	r20, 0x04	; 4
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	04 e0       	ldi	r16, 0x04	; 4
 406:	ca ce       	rjmp	.-620    	; 0x19c <GetLoc+0x10c>
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
 408:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 40c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 410:	88 23       	and	r24, r24
 412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	a1 cf       	rjmp	.-190    	; 0x358 <GetLoc+0x2c8>
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	96 2e       	mov	r9, r22
 41a:	9e cf       	rjmp	.-196    	; 0x358 <GetLoc+0x2c8>
	   case 0xF0: step = Flag?0x30:0xFF; break;
	   case 0x03: step = Flag?0x01:0x0C; break;
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
	   case 0x0C: step = Flag?0x04:0xFF; break;
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
 41c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 420:	88 23       	and	r24, r24
 422:	09 f4       	brne	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	99 cf       	rjmp	.-206    	; 0x358 <GetLoc+0x2c8>
 426:	02 e0       	ldi	r16, 0x02	; 2
 428:	90 2e       	mov	r9, r16
 42a:	1f cf       	rjmp	.-450    	; 0x26a <GetLoc+0x1da>
 42c:	4c e0       	ldi	r20, 0x0C	; 12
 42e:	50 e0       	ldi	r21, 0x00	; 0
       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
	   case 0x0F: step = Flag?0x03:0xF0; break;      
	   case 0xF0: step = Flag?0x30:0xFF; break;
	   case 0x03: step = Flag?0x01:0x0C; break;
 430:	0c e0       	ldi	r16, 0x0C	; 12
 432:	b4 ce       	rjmp	.-664    	; 0x19c <GetLoc+0x10c>
    } 
     if (detX != -1) {

       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
 434:	01 30       	cpi	r16, 0x01	; 1
 436:	69 f0       	breq	.+26     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 438:	02 30       	cpi	r16, 0x02	; 2
 43a:	09 f0       	breq	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	ac ce       	rjmp	.-680    	; 0x196 <GetLoc+0x106>
	   case 0x0F: step = Flag?0x03:0xF0; break;      
	   case 0xF0: step = Flag?0x30:0xFF; break;
	   case 0x03: step = Flag?0x01:0x0C; break;
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
	   case 0x02: step = Flag?0xFE:0xFF; detY = Flag?1:detY; break;
 43e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 442:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 446:	88 23       	and	r24, r24
 448:	09 f4       	brne	.+2      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44a:	86 cf       	rjmp	.-244    	; 0x358 <GetLoc+0x2c8>
 44c:	99 24       	eor	r9, r9
 44e:	93 94       	inc	r9
 450:	83 cf       	rjmp	.-250    	; 0x358 <GetLoc+0x2c8>
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
	   case 0x0F: step = Flag?0x03:0xF0; break;      
	   case 0xF0: step = Flag?0x30:0xFF; break;
	   case 0x03: step = Flag?0x01:0x0C; break;
	   case 0x01: step = Flag?0xFE:0x02; detY = Flag?0:detY ; break;
 452:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 456:	81 11       	cpse	r24, r1
 458:	0a c0       	rjmp	.+20     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 45a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 45e:	42 e0       	ldi	r20, 0x02	; 2
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	02 e0       	ldi	r16, 0x02	; 2
 464:	88 23       	and	r24, r24
 466:	09 f4       	brne	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 468:	99 ce       	rjmp	.-718    	; 0x19c <GetLoc+0x10c>
 46a:	91 2c       	mov	r9, r1
 46c:	97 ce       	rjmp	.-722    	; 0x19c <GetLoc+0x10c>
 46e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 472:	88 23       	and	r24, r24
 474:	09 f4       	brne	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 476:	70 cf       	rjmp	.-288    	; 0x358 <GetLoc+0x2c8>
 478:	91 2c       	mov	r9, r1
 47a:	f7 ce       	rjmp	.-530    	; 0x26a <GetLoc+0x1da>
    } 
     if (detX != -1) {

       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
 47c:	00 3c       	cpi	r16, 0xC0	; 192
 47e:	79 f0       	breq	.+30     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 480:	00 3f       	cpi	r16, 0xF0	; 240
 482:	b1 f0       	breq	.+44     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 484:	00 38       	cpi	r16, 0x80	; 128
 486:	09 f0       	breq	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 488:	86 ce       	rjmp	.-756    	; 0x196 <GetLoc+0x106>
	   case 0x30: step = Flag?0x10:0xC0; break;
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
	   case 0x20: step = Flag?0xFE:0xFF; detY = Flag?5:detY; break;
	   case 0xC0: step = Flag?0x40:0xFF; break;
	   case 0x40: step = Flag?0xFE:0x80; detY = Flag?6:detY; break;
	   case 0x80: step = Flag?0xFE:0xFF; detY = Flag?7:detY; break;
 48a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 48e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 492:	88 23       	and	r24, r24
 494:	09 f4       	brne	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 496:	60 cf       	rjmp	.-320    	; 0x358 <GetLoc+0x2c8>
 498:	47 e0       	ldi	r20, 0x07	; 7
 49a:	94 2e       	mov	r9, r20
 49c:	5d cf       	rjmp	.-326    	; 0x358 <GetLoc+0x2c8>
	   case 0x04: step = Flag?0xFE:0x08; detY = Flag?2:detY; break;
	   case 0x08: step = Flag?0xFE:0xFF; detY = Flag?3:detY; break;
	   case 0x30: step = Flag?0x10:0xC0; break;
	   case 0x10: step = Flag?0xFE:0x20; detY = Flag?4:detY; break;
	   case 0x20: step = Flag?0xFE:0xFF; detY = Flag?5:detY; break;
	   case 0xC0: step = Flag?0x40:0xFF; break;
 49e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 4a2:	88 23       	and	r24, r24
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a6:	58 cf       	rjmp	.-336    	; 0x358 <GetLoc+0x2c8>
 4a8:	40 e4       	ldi	r20, 0x40	; 64
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	00 e4       	ldi	r16, 0x40	; 64
 4ae:	76 ce       	rjmp	.-788    	; 0x19c <GetLoc+0x10c>

       step = 0x00; 
       while(step < 0xFE) {    
	 switch(step) { // sorry, Rue is state machine.      
	   case 0x0F: step = Flag?0x03:0xF0; break;      
	   case 0xF0: step = Flag?0x30:0xFF; break;
 4b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 4b4:	88 23       	and	r24, r24
 4b6:	09 f4       	brne	.+2      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b8:	4f cf       	rjmp	.-354    	; 0x358 <GetLoc+0x2c8>
 4ba:	40 e3       	ldi	r20, 0x30	; 48
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	00 e3       	ldi	r16, 0x30	; 48
 4c0:	6d ce       	rjmp	.-806    	; 0x19c <GetLoc+0x10c>
  
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
 4c2:	13 30       	cpi	r17, 0x03	; 3
 4c4:	b1 f0       	breq	.+44     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4c6:	08 f4       	brcc	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c8:	61 c0       	rjmp	.+194    	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
 4ca:	18 30       	cpi	r17, 0x08	; 8
 4cc:	f9 f0       	breq	.+62     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4ce:	1c 30       	cpi	r17, 0x0C	; 12
 4d0:	b1 f0       	breq	.+44     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4d2:	14 30       	cpi	r17, 0x04	; 4
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d6:	14 ce       	rjmp	.-984    	; 0x100 <GetLoc+0x70>
	  case 0xF0: step = Flag?0x30:0xFF; break;
	  case 0x03: step = Flag?0x01:0x0C; break;
	  case 0x01: step = Flag?0xFE:0x02; detX = Flag?0:detX ; break;
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
 4d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 4dc:	88 23       	and	r24, r24
 4de:	01 f1       	breq	.+64     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 4e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 4e4:	88 23       	and	r24, r24
 4e6:	09 f4       	brne	.+2      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e8:	2e ce       	rjmp	.-932    	; 0x146 <GetLoc+0xb6>
 4ea:	01 50       	subi	r16, 0x01	; 1
 4ec:	22 e0       	ldi	r18, 0x02	; 2
 4ee:	92 2e       	mov	r9, r18
 4f0:	35 ce       	rjmp	.-918    	; 0x15c <GetLoc+0xcc>
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
	  case 0x0F: step = Flag?0x03:0xF0; break;      
	  case 0xF0: step = Flag?0x30:0xFF; break;
	  case 0x03: step = Flag?0x01:0x0C; break;
 4f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 4f6:	88 23       	and	r24, r24
 4f8:	e1 f0       	breq	.+56     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 4fa:	11 e0       	ldi	r17, 0x01	; 1
 4fc:	02 ce       	rjmp	.-1020   	; 0x102 <GetLoc+0x72>
	  case 0x01: step = Flag?0xFE:0x02; detX = Flag?0:detX ; break;
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
 4fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 502:	88 23       	and	r24, r24
 504:	09 f4       	brne	.+2      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 506:	1f ce       	rjmp	.-962    	; 0x146 <GetLoc+0xb6>
 508:	14 e0       	ldi	r17, 0x04	; 4
 50a:	fb cd       	rjmp	.-1034   	; 0x102 <GetLoc+0x72>
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
	  case 0x08: step = Flag?0xFE:0xFF; detX = Flag?3:detX; break;
 50c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 510:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 514:	88 23       	and	r24, r24
 516:	09 f4       	brne	.+2      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 518:	16 ce       	rjmp	.-980    	; 0x146 <GetLoc+0xb6>
 51a:	23 e0       	ldi	r18, 0x03	; 3
 51c:	92 2e       	mov	r9, r18
 51e:	13 ce       	rjmp	.-986    	; 0x146 <GetLoc+0xb6>
	  case 0xF0: step = Flag?0x30:0xFF; break;
	  case 0x03: step = Flag?0x01:0x0C; break;
	  case 0x01: step = Flag?0xFE:0x02; detX = Flag?0:detX ; break;
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
	  case 0x0C: step = Flag?0x04:0xFF; break;
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
 520:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 524:	18 e0       	ldi	r17, 0x08	; 8
 526:	88 23       	and	r24, r24
 528:	09 f4       	brne	.+2      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52a:	eb cd       	rjmp	.-1066   	; 0x102 <GetLoc+0x72>
 52c:	52 e0       	ldi	r21, 0x02	; 2
 52e:	95 2e       	mov	r9, r21
 530:	e8 cd       	rjmp	.-1072   	; 0x102 <GetLoc+0x72>
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
	  case 0x0F: step = Flag?0x03:0xF0; break;      
	  case 0xF0: step = Flag?0x30:0xFF; break;
	  case 0x03: step = Flag?0x01:0x0C; break;
 532:	1c e0       	ldi	r17, 0x0C	; 12
 534:	e6 cd       	rjmp	.-1076   	; 0x102 <GetLoc+0x72>
  
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
 536:	10 3c       	cpi	r17, 0xC0	; 192
 538:	89 f0       	breq	.+34     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 53a:	10 3f       	cpi	r17, 0xF0	; 240
 53c:	b1 f0       	breq	.+44     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 53e:	10 38       	cpi	r17, 0x80	; 128
 540:	09 f0       	breq	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 542:	de cd       	rjmp	.-1092   	; 0x100 <GetLoc+0x70>
	  case 0x30: step = Flag?0x10:0xC0; break;
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
	  case 0x20: step = Flag?0xFE:0xFF; detX = Flag?5:detX; break;
	  case 0xC0: step = Flag?0x40:0xFF; break;
	  case 0x40: step = Flag?0xFE:0x80; detX = Flag?6:detX; break;
	  case 0x80: step = Flag?0xFE:0xFF; detX = Flag?7:detX; break;
 544:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 548:	88 23       	and	r24, r24
 54a:	b1 f0       	breq	.+44     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 54c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 550:	88 23       	and	r24, r24
 552:	09 f4       	brne	.+2      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 554:	b4 ce       	rjmp	.-664    	; 0x2be <GetLoc+0x22e>
 556:	87 e0       	ldi	r24, 0x07	; 7
 558:	98 2e       	mov	r9, r24
 55a:	f5 cd       	rjmp	.-1046   	; 0x146 <GetLoc+0xb6>
	  case 0x04: step = Flag?0xFE:0x08; detX = Flag?2:detX; break;
	  case 0x08: step = Flag?0xFE:0xFF; detX = Flag?3:detX; break;
	  case 0x30: step = Flag?0x10:0xC0; break;
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
	  case 0x20: step = Flag?0xFE:0xFF; detX = Flag?5:detX; break;
	  case 0xC0: step = Flag?0x40:0xFF; break;
 55c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 560:	88 23       	and	r24, r24
 562:	09 f4       	brne	.+2      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 564:	f0 cd       	rjmp	.-1056   	; 0x146 <GetLoc+0xb6>
 566:	10 e4       	ldi	r17, 0x40	; 64
 568:	cc cd       	rjmp	.-1128   	; 0x102 <GetLoc+0x72>
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
	  case 0x0F: step = Flag?0x03:0xF0; break;      
	  case 0xF0: step = Flag?0x30:0xFF; break;
 56a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 56e:	88 23       	and	r24, r24
 570:	09 f4       	brne	.+2      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 572:	e9 cd       	rjmp	.-1070   	; 0x146 <GetLoc+0xb6>
 574:	10 e3       	ldi	r17, 0x30	; 48
 576:	c5 cd       	rjmp	.-1142   	; 0x102 <GetLoc+0x72>
	  case 0x30: step = Flag?0x10:0xC0; break;
	  case 0x10: step = Flag?0xFE:0x20; detX = Flag?4:detX; break;
	  case 0x20: step = Flag?0xFE:0xFF; detX = Flag?5:detX; break;
	  case 0xC0: step = Flag?0x40:0xFF; break;
	  case 0x40: step = Flag?0xFE:0x80; detX = Flag?6:detX; break;
	  case 0x80: step = Flag?0xFE:0xFF; detX = Flag?7:detX; break;
 578:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 57c:	81 11       	cpse	r24, r1
 57e:	eb cf       	rjmp	.-42     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 580:	01 50       	subi	r16, 0x01	; 1
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	92 12       	cpse	r9, r18
 588:	9e ce       	rjmp	.-708    	; 0x2c6 <GetLoc+0x236>
 58a:	9e ce       	rjmp	.-708    	; 0x2c8 <GetLoc+0x238>
  
  while((detY == -1)& giveup) {
    for(giveup = 6; (detX == -1) & (giveup != 0); giveup--) {
      step = 0x00; 
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
 58c:	11 30       	cpi	r17, 0x01	; 1
 58e:	09 f4       	brne	.+2      	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 590:	2b ce       	rjmp	.-938    	; 0x1e8 <GetLoc+0x158>
 592:	12 30       	cpi	r17, 0x02	; 2
 594:	09 f0       	breq	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 596:	b4 cd       	rjmp	.-1176   	; 0x100 <GetLoc+0x70>
	  case 0x0F: step = Flag?0x03:0xF0; break;      
	  case 0xF0: step = Flag?0x30:0xFF; break;
	  case 0x03: step = Flag?0x01:0x0C; break;
	  case 0x01: step = Flag?0xFE:0x02; detX = Flag?0:detX ; break;
	  case 0x02: step = Flag?0xFE:0xFF; detX = Flag?1:detX; break;
 598:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 59c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 5a0:	88 23       	and	r24, r24
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 5a4:	d0 cd       	rjmp	.-1120   	; 0x146 <GetLoc+0xb6>
 5a6:	99 24       	eor	r9, r9
 5a8:	93 94       	inc	r9
 5aa:	cd cd       	rjmp	.-1126   	; 0x146 <GetLoc+0xb6>
      while(step < 0xFE) {    
	switch(step) { // sorry, Rue is state machine.      
	  case 0x0F: step = Flag?0x03:0xF0; break;      
	  case 0xF0: step = Flag?0x30:0xFF; break;
	  case 0x03: step = Flag?0x01:0x0C; break;
	  case 0x01: step = Flag?0xFE:0x02; detX = Flag?0:detX ; break;
 5ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Flag>
 5b0:	12 e0       	ldi	r17, 0x02	; 2
 5b2:	88 23       	and	r24, r24
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 5b6:	a5 cd       	rjmp	.-1206   	; 0x102 <GetLoc+0x72>
 5b8:	91 2c       	mov	r9, r1
 5ba:	a3 cd       	rjmp	.-1210   	; 0x102 <GetLoc+0x72>
 5bc:	91 2c       	mov	r9, r1
 5be:	ce cd       	rjmp	.-1124   	; 0x15c <GetLoc+0xcc>

000005c0 <setupInt>:

}


void setupInt() {        
  EICRA = (1<<ISC10) | (1<<ISC00);  // we need to set up int0 and int1 to trigger interrupts on both edges         
 5c0:	85 e0       	ldi	r24, 0x05	; 5
 5c2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK = (1<<INT0) | (0<<INT1); // then enable them.
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	8d bb       	out	0x1d, r24	; 29
 5ca:	08 95       	ret

000005cc <__vector_1>:
}
 

ISR(INT0_vect){ // the scanning produces brief pulses, we just need to know if it saw one since we last cleared the flag.
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	8f 93       	push	r24
   Flag = 1;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Flag>
}
 5de:	8f 91       	pop	r24
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <send16>:


// send a 16bit word, msb first
void send16 (unsigned int bits) {
  unsigned int temp;  
  CSlow();
 5ea:	2a 98       	cbi	0x05, 2	; 5
 5ec:	40 e1       	ldi	r20, 0x10	; 16
 5ee:	50 e0       	ldi	r21, 0x00	; 0
  for( temp = (0x0001<<15); temp != 0; temp >>= 1) {    
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e8       	ldi	r19, 0x80	; 128
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <send16+0x26>
    if ( (bits & temp) != 0 ) {    SendOne();
 5f6:	2b 9a       	sbi	0x05, 3	; 5
    } else {                       SendZero();
 5f8:	2d 98       	cbi	0x05, 5	; 5
 5fa:	00 00       	nop
 5fc:	00 00       	nop
 5fe:	2d 9a       	sbi	0x05, 5	; 5
 600:	00 00       	nop
    }    
   NOP();
 602:	00 00       	nop
   NOP();
 604:	00 00       	nop

// send a 16bit word, msb first
void send16 (unsigned int bits) {
  unsigned int temp;  
  CSlow();
  for( temp = (0x0001<<15); temp != 0; temp >>= 1) {    
 606:	36 95       	lsr	r19
 608:	27 95       	ror	r18
 60a:	41 50       	subi	r20, 0x01	; 1
 60c:	51 09       	sbc	r21, r1
 60e:	39 f0       	breq	.+14     	; 0x61e <send16+0x34>
    if ( (bits & temp) != 0 ) {    SendOne();
 610:	bc 01       	movw	r22, r24
 612:	62 23       	and	r22, r18
 614:	73 23       	and	r23, r19
 616:	67 2b       	or	r22, r23
 618:	71 f7       	brne	.-36     	; 0x5f6 <send16+0xc>
    } else {                       SendZero();
 61a:	2b 98       	cbi	0x05, 3	; 5
 61c:	ed cf       	rjmp	.-38     	; 0x5f8 <send16+0xe>
    }    
   NOP();
   NOP();
  } 
  CShigh();
 61e:	2a 9a       	sbi	0x05, 2	; 5
 620:	08 95       	ret

00000622 <max7219MakePacket>:
}



unsigned int max7219MakePacket(unsigned char cmd, unsigned char value) {
  return ( (cmd<<8) | (value));
 622:	70 e0       	ldi	r23, 0x00	; 0
}
 624:	9b 01       	movw	r18, r22
 626:	38 2b       	or	r19, r24
 628:	c9 01       	movw	r24, r18
 62a:	08 95       	ret

0000062c <max7219Init>:


void max7219Init( ) { 
   send16(max7219MakePacket(cmdPOWER,  0x01));   // wakeup
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	9c e0       	ldi	r25, 0x0C	; 12
 630:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdTEST,   0x00));   // no test mode   
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	9d e0       	ldi	r25, 0x0D	; 13
 638:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdINT,    0x07)); // 1/2 brightness (8/15)     
 63c:	87 e0       	ldi	r24, 0x07	; 7
 63e:	9a e0       	ldi	r25, 0x0A	; 10
 640:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdSCAN,   0xFF)); // all digits
 644:	8f ef       	ldi	r24, 0xFF	; 255
 646:	9b e0       	ldi	r25, 0x0B	; 11
 648:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdMODE,   0x00)); // no decode
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	99 e0       	ldi	r25, 0x09	; 9
 650:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
  // send16(max7219MakePacket(cmdMODE,   0xFF));  // all decode
  
   send16(max7219MakePacket(cmdDIG0+0, 0x00)); // dots!
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+1, 0x00)); // dots!
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	92 e0       	ldi	r25, 0x02	; 2
 660:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+2, 0x00)); // dots!
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	93 e0       	ldi	r25, 0x03	; 3
 668:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+3, 0x00)); // dots!
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	94 e0       	ldi	r25, 0x04	; 4
 670:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+4, 0x00)); // dots!
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	95 e0       	ldi	r25, 0x05	; 5
 678:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+5, 0x00)); // dots!
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	96 e0       	ldi	r25, 0x06	; 6
 680:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+6, 0x00)); // dots!
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	97 e0       	ldi	r25, 0x07	; 7
 688:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+7, 0x00)); // dots! 
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	98 e0       	ldi	r25, 0x08	; 8
 690:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <send16>

00000694 <max7219SetDisplay>:
    
}

void max7219SetDisplay( unsigned char digit, unsigned char v)   { 
   digit &= 0x07;
   send16(max7219MakePacket(cmdDIG0+digit, v));       
 694:	87 70       	andi	r24, 0x07	; 7
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	28 0f       	add	r18, r24
 69a:	86 2f       	mov	r24, r22
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	92 2b       	or	r25, r18
 6a0:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <send16>

000006a4 <max7219Blit>:
}

void max7219Blit( uint8_t *i) {
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	ec 01       	movw	r28, r24
   send16(max7219MakePacket(cmdDIG0+0, *(i+0))); // dots!
 6aa:	88 81       	ld	r24, Y
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	91 60       	ori	r25, 0x01	; 1
 6b0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+1, *(i+1))); // dots!
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	92 60       	ori	r25, 0x02	; 2
 6ba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
 6be:	8a 81       	ldd	r24, Y+2	; 0x02
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	93 60       	ori	r25, 0x03	; 3
 6c4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	94 60       	ori	r25, 0x04	; 4
 6ce:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
 6d2:	8c 81       	ldd	r24, Y+4	; 0x04
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	95 60       	ori	r25, 0x05	; 5
 6d8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
 6dc:	8d 81       	ldd	r24, Y+5	; 0x05
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	96 60       	ori	r25, 0x06	; 6
 6e2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
 6e6:	8e 81       	ldd	r24, Y+6	; 0x06
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	97 60       	ori	r25, 0x07	; 7
 6ec:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
 6f0:	8f 81       	ldd	r24, Y+7	; 0x07
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	98 60       	ori	r25, 0x08	; 8
}
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
   send16(max7219MakePacket(cmdDIG0+2, *(i+2))); // dots!
   send16(max7219MakePacket(cmdDIG0+3, *(i+3))); // dots!
   send16(max7219MakePacket(cmdDIG0+4, *(i+4))); // dots!
   send16(max7219MakePacket(cmdDIG0+5, *(i+5))); // dots!
   send16(max7219MakePacket(cmdDIG0+6, *(i+6))); // dots!
   send16(max7219MakePacket(cmdDIG0+7, *(i+7))); // dots! 
 6fa:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <send16>

000006fe <max7219SetIntensity>:
}

void max7219SetIntensity( unsigned char v)   { send16(max7219MakePacket(cmdINT, v)); }
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	9a 60       	ori	r25, 0x0A	; 10
 702:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <send16>

00000706 <max7219SetScanLimit>:
void max7219SetScanLimit( unsigned char v)   { send16(max7219MakePacket(cmdSCAN, v)); }
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	9b 60       	ori	r25, 0x0B	; 11
 70a:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <send16>

0000070e <max7219SetDecodeFlags>:
void max7219SetDecodeFlags( unsigned char v) { send16(max7219MakePacket(cmdMODE, v)); }
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	99 60       	ori	r25, 0x09	; 9
 712:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <send16>

00000716 <Delay>:
 716:	05 c0       	rjmp	.+10     	; 0x722 <Delay+0xc>
 718:	00 00       	nop
 71a:	61 50       	subi	r22, 0x01	; 1
 71c:	71 09       	sbc	r23, r1
 71e:	81 09       	sbc	r24, r1
 720:	91 09       	sbc	r25, r1
 722:	61 15       	cp	r22, r1
 724:	71 05       	cpc	r23, r1
 726:	81 05       	cpc	r24, r1
 728:	91 05       	cpc	r25, r1
 72a:	b1 f7       	brne	.-20     	; 0x718 <Delay+0x2>
 72c:	08 95       	ret

0000072e <main>:
void GetLoc(void) ;




int main( void ) {
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	28 97       	sbiw	r28, 0x08	; 8
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	0f be       	out	0x3f, r0	; 63
 740:	cd bf       	out	0x3d, r28	; 61
 uint8_t i;


    // set up directions 
    
  DDRB = (INPUT << PB0 | INPUT << PB1 |OUTPUT << PB2 |OUTPUT << PB3 | INPUT << PB4 |OUTPUT << PB5 | INPUT << PB6 | INPUT << PB7);
 742:	8c e2       	ldi	r24, 0x2C	; 44
 744:	84 b9       	out	0x04, r24	; 4
  DDRD = (INPUT << PD0 | INPUT << PD1 | INPUT << PD2 | INPUT << PD3 | INPUT << PD4 | INPUT << PD5 | INPUT << PD6 |INPUT << PD7);        
 746:	1a b8       	out	0x0a, r1	; 10
  DDRC = (INPUT << PC0 | INPUT << PC1 | INPUT << PC2 | INPUT << PC3 | INPUT << PC4 | INPUT << PC5 | INPUT << PC6 ); 
 748:	17 b8       	out	0x07, r1	; 7

  max7219Init();
 74a:	0e 94 16 03 	call	0x62c	; 0x62c <max7219Init>

}


void setupInt() {        
  EICRA = (1<<ISC10) | (1<<ISC00);  // we need to set up int0 and int1 to trigger interrupts on both edges         
 74e:	85 e0       	ldi	r24, 0x05	; 5
 750:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK = (1<<INT0) | (0<<INT1); // then enable them.
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	8d bb       	out	0x1d, r24	; 29
  DDRD = (INPUT << PD0 | INPUT << PD1 | INPUT << PD2 | INPUT << PD3 | INPUT << PD4 | INPUT << PD5 | INPUT << PD6 |INPUT << PD7);        
  DDRC = (INPUT << PC0 | INPUT << PC1 | INPUT << PC2 | INPUT << PC3 | INPUT << PC4 | INPUT << PC5 | INPUT << PC6 ); 

  max7219Init();
  setupInt();
  sei(); 
 758:	78 94       	sei

  penX = penY = 0;
 75a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 75e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <penX>
 762:	fe 01       	movw	r30, r28
 764:	31 96       	adiw	r30, 0x01	; 1
 766:	ce 01       	movw	r24, r28
 768:	09 96       	adiw	r24, 0x09	; 9

  for( i = 0; i < 8; i++) { // clear image
    image[i] = 0x00;
 76a:	11 92       	st	Z+, r1
  setupInt();
  sei(); 

  penX = penY = 0;

  for( i = 0; i < 8; i++) { // clear image
 76c:	e8 17       	cp	r30, r24
 76e:	f9 07       	cpc	r31, r25
 770:	e1 f7       	brne	.-8      	; 0x76a <main+0x3c>
    image[i] = 0x00;
  }
  
  send16(max7219MakePacket(cmdINT,    0x02)); // 1/2 brightness (C/15)         
 772:	62 e0       	ldi	r22, 0x02	; 2
 774:	8a e0       	ldi	r24, 0x0A	; 10
 776:	0e 94 11 03 	call	0x622	; 0x622 <max7219MakePacket>
 77a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
  max7219Blit( image );   
 77e:	ce 01       	movw	r24, r28
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	0e 94 52 03 	call	0x6a4	; 0x6a4 <max7219Blit>

    send16(max7219MakePacket(cmdINT,    0x02)); // 1/2 brightness (C/15)   
    
    if ((penX != -1) && (penY != -1)) {
      if (IsLow(0, PINB)) image[penY] |= (1<<penX);    // draw button
      if (IsLow(1, PINB)) image[penY] &= (~(1<<penX)); // erase button
 786:	ee 24       	eor	r14, r14
 788:	e3 94       	inc	r14
 78a:	f1 2c       	mov	r15, r1
    }
    max7219Blit( image );   

    while(IsLow(0, PINB) | IsLow(1, PINB)); // wait for user to lift finger off button
 78c:	11 e0       	ldi	r17, 0x01	; 1
 78e:	02 c0       	rjmp	.+4      	; 0x794 <main+0x66>
  
  send16(max7219MakePacket(cmdINT,    0x02)); // 1/2 brightness (C/15)         
  max7219Blit( image );   
   
  while(1) {
    while(IsHigh(0, PINB) & IsHigh(1, PINB)); // wait for button
 790:	80 ff       	sbrs	r24, 0
 792:	03 c0       	rjmp	.+6      	; 0x79a <main+0x6c>
 794:	83 b1       	in	r24, 0x03	; 3
 796:	19 99       	sbic	0x03, 1	; 3
 798:	fb cf       	rjmp	.-10     	; 0x790 <main+0x62>
 
    GetLoc();
 79a:	0e 94 48 00 	call	0x90	; 0x90 <GetLoc>

    send16(max7219MakePacket(cmdINT,    0x02)); // 1/2 brightness (C/15)   
 79e:	62 e0       	ldi	r22, 0x02	; 2
 7a0:	8a e0       	ldi	r24, 0x0A	; 10
 7a2:	0e 94 11 03 	call	0x622	; 0x622 <max7219MakePacket>
 7a6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <send16>
    
    if ((penX != -1) && (penY != -1)) {
 7aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <penX>
 7ae:	8f 3f       	cpi	r24, 0xFF	; 255
 7b0:	61 f1       	breq	.+88     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7b2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7b6:	9f 3f       	cpi	r25, 0xFF	; 255
 7b8:	41 f1       	breq	.+80     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
      if (IsLow(0, PINB)) image[penY] |= (1<<penX);    // draw button
 7ba:	18 99       	sbic	0x03, 0	; 3
 7bc:	11 c0       	rjmp	.+34     	; 0x7e0 <main+0xb2>
 7be:	e1 e0       	ldi	r30, 0x01	; 1
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	ec 0f       	add	r30, r28
 7c4:	fd 1f       	adc	r31, r29
 7c6:	e9 0f       	add	r30, r25
 7c8:	f1 1d       	adc	r31, r1
 7ca:	97 fd       	sbrc	r25, 7
 7cc:	fa 95       	dec	r31
 7ce:	40 81       	ld	r20, Z
 7d0:	97 01       	movw	r18, r14
 7d2:	08 2e       	mov	r0, r24
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <main+0xaa>
 7d6:	22 0f       	add	r18, r18
 7d8:	0a 94       	dec	r0
 7da:	ea f7       	brpl	.-6      	; 0x7d6 <main+0xa8>
 7dc:	24 2b       	or	r18, r20
 7de:	20 83       	st	Z, r18
      if (IsLow(1, PINB)) image[penY] &= (~(1<<penX)); // erase button
 7e0:	19 99       	sbic	0x03, 1	; 3
 7e2:	13 c0       	rjmp	.+38     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e4:	e1 e0       	ldi	r30, 0x01	; 1
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	ec 0f       	add	r30, r28
 7ea:	fd 1f       	adc	r31, r29
 7ec:	e9 0f       	add	r30, r25
 7ee:	f1 1d       	adc	r31, r1
 7f0:	97 fd       	sbrc	r25, 7
 7f2:	fa 95       	dec	r31
 7f4:	97 01       	movw	r18, r14
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <main+0xce>
 7f8:	22 0f       	add	r18, r18
 7fa:	33 1f       	adc	r19, r19
 7fc:	8a 95       	dec	r24
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <main+0xca>
 800:	92 2f       	mov	r25, r18
 802:	90 95       	com	r25
 804:	80 81       	ld	r24, Z
 806:	89 23       	and	r24, r25
 808:	80 83       	st	Z, r24
    }
    max7219Blit( image );   
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <max7219Blit>

    while(IsLow(0, PINB) | IsLow(1, PINB)); // wait for user to lift finger off button
 812:	83 b1       	in	r24, 0x03	; 3
 814:	93 b1       	in	r25, 0x03	; 3
 816:	81 70       	andi	r24, 0x01	; 1
 818:	81 13       	cpse	r24, r17
 81a:	fb cf       	rjmp	.-10     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81c:	96 95       	lsr	r25
 81e:	91 70       	andi	r25, 0x01	; 1
 820:	91 13       	cpse	r25, r17
 822:	f7 cf       	rjmp	.-18     	; 0x812 <__DATA_REGION_LENGTH__+0x12>

    Delay(8000);   //<--- this is the amount of time to show the detected location before searching again.
 824:	60 e4       	ldi	r22, 0x40	; 64
 826:	7f e1       	ldi	r23, 0x1F	; 31
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 8b 03 	call	0x716	; 0x716 <Delay>
   
  }
 830:	b1 cf       	rjmp	.-158    	; 0x794 <main+0x66>

00000832 <_exit>:
 832:	f8 94       	cli

00000834 <__stop_program>:
 834:	ff cf       	rjmp	.-2      	; 0x834 <__stop_program>
